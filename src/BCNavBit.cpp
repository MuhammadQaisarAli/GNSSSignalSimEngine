//----------------------------------------------------------------------
// BCNavBit.h:
//   Implementation of navigation bit synthesis class for B-CNAV1
//
//          Copyright (C) 2020-2029 by Jun Mo, All rights reserved.
//
//----------------------------------------------------------------------

#include <memory.h>
#include "ConstVal.h"
#include "BCNavBit.h"

const unsigned int BCNavBit::B1CSecondCode[63][57] = {
// for PRN 01 L1C secondary code
{	0xc62f397a, 0x217f3dd1, 0xfac44c61, 0x1d6249ef, 0x20b2b2d4, 0x3946abd8, 0xc6d64c7f, 0x08d2066e, 
	0xf390226e, 0x2c4e6cbc, 0x3909a45d, 0xc6c2c6ac, 0x3afa68c5, 0xde6d9b19, 0x42266dfa, 0x75e0c07b, 
	0xd1616530, 0xe15f7a0b, 0x2cc8eb5d, 0x22f4f3bf, 0xb56d900f, 0xcdbb5fea, 0x9bb49c31, 0xb4eabdc4, 
	0xaecb02f8, 0x07b4db3c, 0xff020947, 0x6193ddac, 0x1327ebc8, 0x2182ce74, 0x440e6822, 0x35c515be, 
	0xe1f83cc9, 0x37dd98f9, 0x65457e1c, 0x2f51e281, 0x46df48f1, 0x1af1e9a2, 0x61d1e51e, 0x6d048602, 
	0x553d5f25, 0xe252f34a, 0x5af6b425, 0xe9db77f8, 0x0dde3b9e, 0xaf28c455, 0xd2d8d615, 0xe8d42b92, 
	0xe8d26636, 0xba685975, 0xb1992c5e, 0x2750ac5d, 0xa1ac6d2d, 0xa80c53d6, 0xe771eec2, 0x7fbb6e5d, 
	0x2f397a68 },
// for PRN 02 L1C secondary code
{	0xb5de655d, 0x0d2dc05c, 0xd6eb326d, 0x4a8d4e65, 0xf946ec79, 0xfd07b318, 0x2c0c4955, 0x818303e9, 
	0x931be6de, 0xa711ca30, 0x3b24f0ef, 0x56589dbc, 0x0a987fca, 0x73048360, 0x514fae1f, 0xb096e7d1, 
	0xae178c0e, 0xb6acf74f, 0xbc481233, 0x482bb415, 0x06e49d1e, 0x2c7b5548, 0x915c0e2d, 0x253e3a1c, 
	0x6f112489, 0xc86800b2, 0xeaecc9de, 0x8d67419b, 0x8cedc943, 0x4067b748, 0xa6f517ee, 0xf2e1b845, 
	0xf56907cd, 0x4d859129, 0x96941d7e, 0x1f4ab3f5, 0xf1ec9114, 0x3b2fb5e8, 0xe7b81070, 0x8469fd12, 
	0x8eb77b0b, 0x5236c76a, 0xd6c35615, 0x622ebbab, 0x0b435f05, 0x2e7092fa, 0xd4d530b0, 0xbdea08d3, 
	0xbdcd3756, 0x25128f68, 0x7a8ba2bc, 0x2de29148, 0xd5d9677a, 0x9620af7a, 0x1a195657, 0xbe921ce8, 
	0xde655da0 },
// for PRN 03 L1C secondary code
{	0xc1725f74, 0x9dfe434d, 0xbd441fa9, 0x55b75486, 0xe8a86fc5, 0x921996fd, 0x56f2cb3b, 0xd55eb8df, 
	0x506b215b, 0x5a7078bb, 0xd16743c9, 0x053e2e5b, 0xb6610610, 0x64e81414, 0x97ff6fd2, 0x3314ad2e, 
	0x1f617a74, 0x59d08f8c, 0x63b22d59, 0xb5d73a70, 0xd83f92a4, 0xc9e36426, 0x45bad775, 0xd07ecfc9, 
	0xee929f08, 0xe27a43a5, 0x34a1f344, 0x04a0411e, 0xc8230263, 0x0301d0e9, 0xb163fdcd, 0xca89bb55, 
	0x0bacfb73, 0x2217d062, 0xcdf961c7, 0x3b2299ab, 0x4f129abb, 0xe1a3293b, 0x25424e8a, 0x6cd6515f, 
	0xfb46c121, 0xdfca2354, 0x19901c49, 0x9e87195e, 0xe37da0f0, 0x40195890, 0xfd90fdf5, 0x157df84d, 
	0x3848d4c0, 0xc8782df6, 0xc3d4c70b, 0xdc91c04c, 0xf956229f, 0xb4241b16, 0x27d45359, 0x3a8b9215, 
	0x725f742c },
// for PRN 04 L1C secondary code
{	0x090b8a59, 0x45ba4933, 0xa17a42f6, 0x3d5da00e, 0x8c57027a, 0x39b6fc79, 0x865ab091, 0x6ae7db82, 
	0xdb84e7ef, 0x4df0c10b, 0xcb9a8e68, 0xadb8a2af, 0x08b05cc9, 0xdebffa51, 0x13e5e51b, 0x35b787f3, 
	0xe7c17e8a, 0x1dc63dbf, 0x7d6d0bfb, 0x90bf3ba3, 0x500437b4, 0xbe821b9a, 0x7b35177a, 0xd8c969f6, 
	0x51fe344c, 0x9268d420, 0x54ce59af, 0xfc0cb2ae, 0x8a683197, 0x13e60e61, 0xb32a0e5d, 0x84156721, 
	0x6b94fef6, 0x33c4ce0d, 0x4f3077ce, 0x2e309e87, 0x8a212787, 0x0978bb16, 0xf9851b84, 0xfbb6d502, 
	0x22cbae1b, 0x140703cf, 0x0079c9c2, 0x2d10948b, 0x3d94267d, 0x8bd0d80e, 0xfe1eaf6f, 0xbeea108f, 
	0xfaf223b9, 0x4ddc388c, 0xf6668dce, 0x9b2426d0, 0xc81292ab, 0x51270493, 0x19a49584, 0x43524b31, 
	0x0b8a5914 },
// for PRN 05 L1C secondary code
{	0xf28ecd14, 0x83ed4799, 0xe352c8fa, 0xa75e078d, 0x6d85c090, 0xb94240e8, 0xb1ec781e, 0xf057c4d2, 
	0x53e678ad, 0x4a0a2cdc, 0xe58e68b0, 0xf998e256, 0xf84640ed, 0x14fdbf18, 0x78f58bfe, 0x8806bf63, 
	0x65af008e, 0xe480c1e0, 0xe66a67b0, 0x3eba3da3, 0x5501ee25, 0x7dde7e31, 0x0015ff8a, 0xbe36058b, 
	0x7dfac64d, 0x6695dbac, 0xf40f74cc, 0x5af85a30, 0x8ffb2983, 0xd9212fb2, 0x4c464b7c, 0x1103d5b4, 
	0x71c29a0a, 0xdf7906a2, 0xba8f04fb, 0xffd50c35, 0x3d8f33af, 0xb10565d6, 0xb95a7910, 0xa1149cb8, 
	0x0441f007, 0x6feaf930, 0xc7f94126, 0x365d1a2d, 0xbaeae90e, 0x1cbf1f48, 0x3264566d, 0x57bd0463, 
	0x67c006f1, 0x0fcd1a6b, 0xe16a4777, 0x90acaedc, 0x55ab017e, 0x1e8c2a61, 0x67ef2141, 0x35ab3d12, 
	0x8ecd14b4 },
// for PRN 06 L1C secondary code
{	0xb5d9167c, 0x9960093b, 0x072ea375, 0x4e02de6d, 0xe63d8521, 0x3eabacf2, 0xfa7b6014, 0x1635f5e3, 
	0xa583c061, 0x50019699, 0x0cfb0924, 0x40bfd4ce, 0xb86dc1ae, 0x7b91bd0b, 0xe54be20e, 0xfe764898, 
	0x2acddf57, 0xbecda34c, 0xee698395, 0xc84279a1, 0x31dab408, 0xb4d49e5d, 0x18bda8fb, 0x37b5fd36, 
	0x5eb2e276, 0xee834529, 0x8e47f5f4, 0x435bf538, 0x6be94856, 0x65582b3f, 0xa1c1f431, 0x04736de0, 
	0xa4d918a2, 0xe704bb05, 0xd74aa9c9, 0x454a58aa, 0x21e74810, 0x67865b4e, 0xf835fd90, 0x82c3c6cf, 
	0x4523036c, 0x7195ea56, 0x378fe5b6, 0x058e7183, 0x4b64665c, 0xe69f6752, 0xd9782fd7, 0x0192a2c2, 
	0xb46bdd58, 0x3f5ad0e8, 0x15ec0a4b, 0x953cc2d0, 0xa9d3a7cb, 0xa80b433c, 0xfcd25037, 0x2d170b5a, 
	0xd9167cd6 },
// for PRN 07 L1C secondary code
{	0xb08c6a2b, 0xa9d93abc, 0xa78c96c1, 0x1f49930a, 0xacd1d0ee, 0x13deafb5, 0xcafb88c1, 0x56bb9072, 
	0xe7adb007, 0x06bb948e, 0xba27620c, 0x3f7cb4b5, 0x2900b59d, 0xf8d2e99d, 0xbb5df197, 0xf850d294, 
	0xf7787e9f, 0x9509a0aa, 0x3e1fc769, 0x6c9460c8, 0x2a56e327, 0xcadeb845, 0x65c26b21, 0x50254110, 
	0xb1b09a47, 0xf8ef021d, 0xacf4a1ae, 0x5e9fde45, 0xdb2ad3f2, 0x14b01b5c, 0x67461018, 0x35f7f3dd, 
	0x7160bb45, 0x10061d03, 0x252ae6ef, 0xc5b2113e, 0x0620510d, 0x10ed9c83, 0xfda66d17, 0xe7c63841, 
	0x5f297bb6, 0x98d7894c, 0xcb003913, 0x5b309b35, 0x3627a8b6, 0xaed04e4d, 0x6abf9944, 0xdc57d4a8, 
	0xb13aae46, 0x0a95f51d, 0x914cfeab, 0x593905ba, 0x368af236, 0xd66c866d, 0xe44e0069, 0x1948f58c, 
	0x8c6a2b7d },
// for PRN 08 L1C secondary code
{	0x94bf71e7, 0x5aa4452a, 0xed09863f, 0x24d72f75, 0xfb793a5c, 0x76b099c9, 0x95c5afa8, 0x6a4012eb, 
	0x92c4825d, 0x004219fd, 0x1d5ee052, 0x63663715, 0x0e859ecf, 0xe340e3ed, 0x59cd7a67, 0x93250487, 
	0x9545b610, 0xc4b3ec54, 0xbc31f28e, 0x435b9075, 0x761f22cf, 0x4653eece, 0x1c9ebd40, 0x75140b94, 
	0x336576fc, 0xb76c2f20, 0x54403d56, 0x0df523f7, 0x4d59e376, 0x55ebf90b, 0xce029790, 0x03a12c2f, 
	0x8b8b3a66, 0xc4d242c0, 0x37feff93, 0x869a6fc5, 0x76963dc2, 0x7f4ed562, 0x8f527666, 0xc302b254, 
	0xb6c8f3cf, 0x9a1c1a14, 0x8a6b22a0, 0x63d2ddb3, 0x8053615d, 0x6d4f9a81, 0x6c73e3c2, 0xbd3650b9, 
	0xccd896f9, 0x5d6758d6, 0xaffa9d7c, 0x54d42521, 0x0faaf814, 0x52159514, 0x5caffac2, 0x8d735d1f, 
	0xbf71e7b5 },
// for PRN 09 L1C secondary code
{	0xeb58688e, 0xa1458ef2, 0x3a11bde3, 0x8f346b4d, 0x279cb005, 0xa7b2d667, 0x263daa08, 0xf81c3fa6, 
	0x4cbabfe4, 0x8d5ee8d0, 0x9d95ccbb, 0xf5495b47, 0xe89dab48, 0x9c7f7c20, 0x26db4169, 0xd2ac0f4c, 
	0x30f41cd9, 0x2be20d28, 0x240eca81, 0x9e4a747a, 0x8eaca32d, 0x24eb2bdd, 0x594b5131, 0x088eadf9, 
	0x2456a1ca, 0x668deda8, 0xe51512a3, 0xd6ed8e68, 0x770d5fcf, 0x47c9ecfc, 0x80840b40, 0xb8c482b6, 
	0xe71ca22d, 0xafb6fa5c, 0xf72c7b31, 0x9974410d, 0xc97c7f74, 0xf85b34ca, 0xb42932ef, 0xf8b77b7b, 
	0x21882759, 0xbc07345e, 0xeb9c3aaf, 0xa2a6ed42, 0x8408cccb, 0x7661482c, 0x07b3c928, 0xfb907eab, 
	0xc01f1954, 0xcb192642, 0x85a1d3e6, 0x98d367cb, 0xf8034264, 0x09df2a98, 0xcde0d57e, 0x866e1493, 
	0x58688e12 },
// for PRN 10 L1C secondary code
{	0xa7348719, 0x70664310, 0x86413e1c, 0x0492ac74, 0x8c30d870, 0x29b4fcc9, 0x8a4d5349, 0x4a3bd463, 
	0xe2808f4e, 0xf7931f96, 0x80e956e2, 0x8dab93d0, 0xfd095c3e, 0xdebcf1ed, 0xd024189a, 0x0bebbec4, 
	0x3edc8ae4, 0xecc5ebdf, 0x41f7c573, 0xb6fc0b85, 0x0a180675, 0x279d72af, 0x8761c421, 0x04543cc4, 
	0xe0c6e5ff, 0x47345c06, 0xbd052e14, 0x8c0c7a83, 0x5ec9b892, 0xbdeefdf5, 0x63329e7d, 0xb0ffc915, 
	0xa9f57250, 0x71945354, 0x7dec84ea, 0x49d58a31, 0xff1c755d, 0x1f9d2b40, 0x8ef5d478, 0x7f936f10, 
	0xfc7e4079, 0xb82c5fd2, 0x5bd6d306, 0xb88a2380, 0x9efe9661, 0x57448a6a, 0x3b5b7664, 0x7c78f118, 
	0x4e9559c9, 0xbc2526b3, 0x5b810f0f, 0x1895f54a, 0xb128408b, 0x12ebee25, 0x9c3cc7d4, 0x93270fc9, 
	0x348719c3 },
// for PRN 11 L1C secondary code
{	0x15406b11, 0x3393e29f, 0x2fe62efb, 0x46f4a051, 0xb85d3cc5, 0x2a580577, 0xb9da0c41, 0xd50cfc18, 
	0x27de4691, 0xbbbdf6a6, 0x80e0c347, 0xbbab90e0, 0xe0be2945, 0x274b2374, 0x4b89abe7, 0x77e68d03, 
	0x2ea21191, 0x5826fd6c, 0xdb5f40ed, 0xa5a26559, 0x3d0e2b8b, 0x531d3fee, 0x59c69f91, 0x1db73dd1, 
	0x55510484, 0x833f07e3, 0x9d245b4c, 0x325ec97a, 0xf79b6f2c, 0x3d17c675, 0xe0aaaed1, 0x3859f257, 
	0x1f36351f, 0xc4dcbec2, 0xe25b73eb, 0x4b9a968c, 0xe234197f, 0x07fc55a8, 0x7716119b, 0x3f9bc5cb, 
	0x049fc284, 0x29efaf71, 0x03c4cc00, 0x0408b1ae, 0x79b1857a, 0x052ec92b, 0x8bdf56b7, 0x58fdf1c9, 
	0x0e03348e, 0x2834a10e, 0x5771a5b0, 0x12f86e34, 0xa4c472a4, 0xb953a06f, 0xc464bec0, 0xc3e904a9, 
	0x406b118e },
// for PRN 12 L1C secondary code
{	0xa5711032, 0x30223a97, 0xf6256f19, 0x354656cb, 0x39be42bd, 0x533961f4, 0x2514dd83, 0xf473bcfd, 
	0xa6004e53, 0x0fe6a8fa, 0xeaafa349, 0x5fd9c027, 0x32ff004e, 0xd3703a4d, 0x412aada4, 0xa8de98e3, 
	0x7f772264, 0x969eca1a, 0x958f0e5d, 0xa23e2938, 0xdf474007, 0xb8cfdb34, 0xb64aed5a, 0x86192966, 
	0xa841d249, 0x25d6112a, 0x9a589601, 0x8e77eeb6, 0xd9b4f837, 0x2ef5dab0, 0xfef5969d, 0x491cbff8, 
	0x160e0ca2, 0x799c7f84, 0x94b16a0d, 0x1450d6d6, 0xacfc67e3, 0x04d64057, 0xd5ed70ef, 0x9a191ec2, 
	0xdce448e0, 0x2a32368a, 0xd2dae4d7, 0x44284ee9, 0x24dda575, 0xdaa3c2b3, 0xf6478fbc, 0xb5f90b19, 
	0x879f8502, 0x63e98ce2, 0x5d7ccce9, 0x7ca33ce4, 0x05365b91, 0x2402e767, 0x2511065c, 0x22cef5e0, 
	0x711032b5 },
// for PRN 13 L1C secondary code
{	0x821665ef, 0x18fa92f8, 0x465555fb, 0x351509fb, 0xc635c93d, 0x9f5789e4, 0xc3e976fd, 0xef4384cb, 
	0x79639a1b, 0x1b0e1df4, 0xb7ee985e, 0x40c0c633, 0xdecc28b4, 0x0a259170, 0x0b086159, 0x8f1553c9, 
	0x6eba7af0, 0xc5abf06d, 0x33aeed56, 0xe405bffa, 0xb540038c, 0xc898ef9e, 0x43bbafc8, 0x90c52e0d, 
	0xbb565af0, 0x44d3e8cf, 0xe0df72bc, 0xa0da7670, 0x7ea84387, 0xcef5ee43, 0x7cd04b4a, 0xd06522df, 
	0x3abe0264, 0x95103c66, 0x9e2d6a7f, 0x85e21cd2, 0xbff9a5cc, 0x36e6fa0d, 0x8b5171e7, 0x9aadc5a5, 
	0x23ed8037, 0x2f0282c8, 0x1b4cac32, 0xa9742829, 0x2aa5d2cb, 0x85421856, 0x3f935e55, 0x67f36ff9, 
	0xe5f61708, 0xc122a241, 0x087437d3, 0x4ffb67f3, 0xd53d64fe, 0x350c2150, 0xe9a5d2aa, 0x4a0a174a, 
	0x1665ef6c },
// for PRN 14 L1C secondary code
{	0xf41624e6, 0x724682f0, 0x0381bf46, 0x6714579a, 0x3b6207cd, 0x15b50657, 0x8b3348d4, 0x447445ac, 
	0xfe8737b7, 0x93e0a751, 0xa56277b3, 0x5ca7cf43, 0xf7adde55, 0x3777b746, 0x173decd7, 0x5fea1a20, 
	0xf5580894, 0x6b9f4f24, 0xee6d190e, 0x7b7656a5, 0x9f0bcdce, 0x8801e85f, 0xa06b8a6b, 0xa763e851, 
	0x971ec746, 0x5ba1a83d, 0x68bc7186, 0x4713107c, 0x6e78ca74, 0x9d13ad39, 0x4c6fbe37, 0x2e516f5b, 
	0x2b927457, 0x7f6353a0, 0x75c1d9eb, 0x0090842e, 0xe89858b6, 0x27a7f7c6, 0x89e5082c, 0x61842d77, 
	0x27002e2b, 0x502bb040, 0xfaa4837f, 0x3ccd2629, 0xa5cf6d74, 0x474ae2c4, 0xfcec1cd8, 0x195dac48, 
	0x4fb6ba14, 0x13544b75, 0x0891bafd, 0xe1e0ac32, 0xf0d60e49, 0x0c56dd65, 0x2ab0c34b, 0xac904195, 
	0x1624e63b },
// for PRN 15 L1C secondary code
{	0x2394123f, 0x4fe2414e, 0xf537eb65, 0x93040a15, 0x7f60b977, 0xf3002e0b, 0xd474c6c1, 0xa7deb426, 
	0x6bf9dcf6, 0x47279b4e, 0xe905cde8, 0x8e54490d, 0x20e8ce98, 0x024b4a80, 0x1b902cc3, 0xc184c22f, 
	0xf7d8ccee, 0xa2ac628b, 0xa1d6d61f, 0x809b2a25, 0xae9ff8f9, 0x3d8d7a34, 0xce2bf22a, 0xa7b81fed, 
	0xead5c073, 0x60344481, 0x4b3116a1, 0xbf2aad00, 0x600c3aa9, 0x5b2d0aa4, 0xd187ee47, 0x8056bb0c, 
	0x31d439ac, 0xa19fb140, 0x36c78350, 0x40e60f9b, 0xc239754c, 0xfa9169aa, 0x9c68ede2, 0x07f275a3, 
	0xdeda9e8f, 0x0b74b83f, 0x3a2b6f17, 0x88bd9d7c, 0x7d7d7890, 0xbe32088d, 0x45f0e71c, 0x8baa926c, 
	0xc3744c2d, 0x1364eb7b, 0x0e79a5b9, 0xbd65d399, 0x81f2f92f, 0x2a646dca, 0xff9e0e96, 0xa5dc1ccb, 
	0x94123f31 },
// for PRN 16 L1C secondary code
{	0x9fd03cbd, 0xbd553d70, 0xf4a7242c, 0x80ffaa50, 0xe75df496, 0xafd1fe13, 0x57cfaa93, 0xb74ce6d4, 
	0x424a86d2, 0x4ab5a94e, 0x5ca60120, 0x34f69e18, 0xe3cfc545, 0x58084874, 0x162c5793, 0xbc5da8ea, 
	0xc51df543, 0x89a48434, 0x2841e275, 0x1ba476dd, 0xeb174803, 0xa8d07c34, 0x614fa858, 0xa68326fc, 
	0x0e63ad3a, 0x4651d7bc, 0xf1c19976, 0x50e1f103, 0x789dc289, 0x2bc43c70, 0xd0f3f535, 0x742b6f53, 
	0x54458123, 0xdeb338b6, 0xf3e28dd6, 0x5c1ddb72, 0xde985e05, 0x32909502, 0x9767ad00, 0xc947610e, 
	0x31a2a865, 0x2a832f37, 0xf399ec78, 0x4bf0a251, 0x32fa5da5, 0x40f6dadf, 0x0d995f7b, 0xcb6c8cd6, 
	0x4773f473, 0xb323f246, 0x1e6cbe62, 0xaf9f9980, 0x5f3d449d, 0x7f004254, 0xd9d7fd73, 0x4548401f, 
	0xd03cbd9f },
// for PRN 17 L1C secondary code
{	0x866c9773, 0x7602e97d, 0x139ee142, 0x323f2b0b, 0x31562e94, 0x45243f24, 0xc388d3d1, 0xdac898b5, 
	0xdbf86239, 0x87a1e0ac, 0x20e79735, 0x64db01cb, 0x10953865, 0x7dd27f2f, 0x1c1b4679, 0x2f1493de, 
	0x5cb574fb, 0x6878b5dc, 0x38fbd37b, 0xc93c3231, 0x47484303, 0x5d76fc80, 0x91c518dd, 0xc568eb26, 
	0x31f58155, 0x1536d2c1, 0xf8d3f9a6, 0xeb50a336, 0xe6ff1cf5, 0xb0c1ad42, 0xf9fb9e63, 0x685bcc8f, 
	0x5526162c, 0x1299d5e8, 0x03147579, 0x974fc884, 0x1f1e34f6, 0x981e1656, 0x5633966e, 0xc7fbfbe8, 
	0x8a04b818, 0x30c4d436, 0x35ee1492, 0x37ac8eaf, 0x4103a930, 0x388c925f, 0xd2ab96df, 0x445399e7, 
	0xc4a2687b, 0xcfe41b12, 0xd565feac, 0x1e6a4ed1, 0x5d495d28, 0xb92b3c0a, 0xbfd355c5, 0x6c13f99a, 
	0x6c9773a4 },
// for PRN 18 L1C secondary code
{	0xfecd1a47, 0x4503844c, 0x11a2dc96, 0x0fc68bc6, 0x94521f08, 0xc3cc123a, 0x9a9abf6f, 0xee5d43a8, 
	0xc1860ce6, 0x0ae9dd9c, 0xf5656457, 0x20cf0fdb, 0xe128a571, 0x458fc043, 0xed16218f, 0x870289a4, 
	0x62cdfcc8, 0xe0365b89, 0x3e09928f, 0xe75064dd, 0x130460ce, 0x8918c06f, 0x5e827ea7, 0xf9b8a62c, 
	0xe8764a7e, 0xbffc0de0, 0x421859f1, 0x713a5b65, 0x6aa7a7e0, 0x5ad5fe86, 0x19745ae2, 0xf8c4c850, 
	0x0a39126c, 0xee760c4a, 0x9de3cbfe, 0x8a984a66, 0x6281ba3b, 0xc489c1f8, 0xfde213e6, 0xb73a73d6, 
	0xdafa2a38, 0xc6bf0577, 0xe9efa434, 0x21be53e8, 0x4d815755, 0xbfb58c5b, 0x2563b251, 0xf7618316, 
	0xaee093e6, 0x53f52790, 0xfa5dffa1, 0x0bad992b, 0x0f8ba928, 0xf971cb32, 0x95c28094, 0x1ce200e7, 
	0xcd1a47cc },
// for PRN 19 L1C secondary code
{	0x2a2bbe8c, 0xab65710e, 0x9b0408c0, 0x9f19b5e4, 0x3e65b6c0, 0x676bac3d, 0x35d6e624, 0x6da67cbc, 
	0xad98f903, 0x1020d927, 0x8ea6d503, 0x7dd45470, 0x4d59c031, 0xde41a9ad, 0xccc62c08, 0x7780c1ed, 
	0x85633a44, 0x73fe9307, 0xf2ebf92c, 0x81035a96, 0x2b663a00, 0xfa4b41e0, 0x19a609fa, 0x2739503d, 
	0x27e927cb, 0xb5bd8904, 0xcf03f383, 0x9f52bace, 0x3a75b99a, 0x06b5e82a, 0x120e00f9, 0xd3750441, 
	0xac2aaae7, 0x556252d7, 0xdcfb0222, 0xc6e65739, 0xe69fdff7, 0xb0754a6f, 0xc528b6ae, 0x53a314b7, 
	0x47858486, 0xe35bff35, 0x1d6b1b12, 0x136e3aac, 0x89667e97, 0xc0c64ab8, 0x1c6a36ec, 0x9a812c95, 
	0x4f0379ee, 0x37b60688, 0x45910b1f, 0xdf5ac753, 0xd8074b7b, 0xca4bb060, 0x4bbbd1d6, 0x0c0b2e55, 
	0x2bbe8ce3 },
// for PRN 20 L1C secondary code
{	0x67f2ccce, 0xb2ccdbd5, 0xdb47976e, 0x49ffc0c6, 0x72661ee1, 0xc89cc29f, 0xbeff8370, 0xc54e448f, 
	0x62d0f8e2, 0x2dea8c24, 0xa921abbe, 0x601c077e, 0x2924e2ae, 0xa97773bc, 0x8c3937b5, 0x43d7f327, 
	0x5de14f45, 0x1198e797, 0xb287eb3f, 0xab401056, 0xafd183b8, 0x2751135d, 0x5092616b, 0x590bf201, 
	0xbe0d24e4, 0x4ac55896, 0x72a641ff, 0x1967e5a6, 0xd0c3654b, 0x8958ccae, 0x6b8a754a, 0xd1cd743e, 
	0xf4f94d92, 0x83a37bb5, 0x7702e635, 0x1f2707e2, 0xdef0e233, 0x36a45ad0, 0x2903a980, 0xf4a10c45, 
	0x25c656da, 0xc0332511, 0xcc60c1a4, 0xf99b426f, 0xe7930721, 0x289bd49a, 0xaf91fc40, 0x3d3415b4, 
	0x507970ac, 0xbec4406c, 0x926c296e, 0xd37e318b, 0x4a507d15, 0x0a777c39, 0x376afb79, 0xdb9ea904, 
	0xf2cccede },
// for PRN 21 L1C secondary code
{	0xb284f2db, 0x3416b5a0, 0x776d3c85, 0x3c157e0c, 0xf36df989, 0x562e7788, 0xb6ffef90, 0x2b6882fc, 
	0x57db9829, 0x7cae55fd, 0x8733df28, 0x9bf08b65, 0x39c80379, 0x39edaa0c, 0x8a418c27, 0x84bee5e5, 
	0xc6df42e5, 0x39cdfea2, 0x87b75d08, 0xa4dcd453, 0x3c20c8a0, 0x44ee6381, 0xa1a10ed9, 0xb0fa3b30, 
	0x51e1ea9c, 0x0e648762, 0x10ab5170, 0xe0bccc0d, 0xeb7287f6, 0xdeaccf75, 0xea02661d, 0x8204ded8, 
	0x2bcd3954, 0x65d121bc, 0x450164a5, 0x016bd52d, 0x77246c5e, 0x857eb1ed, 0x87037c7a, 0x26f3fada, 
	0x19b0b40d, 0xaaf25aac, 0xa778ee7f, 0xd816a41f, 0xef4d2c72, 0x4bd0bcaf, 0x13cb42f4, 0x2b658418, 
	0xd49591dd, 0x073a8d90, 0xd2d3e992, 0xc8208de6, 0x57e08a58, 0xcc9ce55d, 0x88c78b17, 0x26d20d46, 
	0x84f2dbfd },
// for PRN 22 L1C secondary code
{	0xe3a35add, 0xd9adfb74, 0xad201746, 0x05106781, 0x7390a910, 0xd9d8dadf, 0x7cfb70e5, 0xf1064632, 
	0x9b40bcb6, 0xc90fc03a, 0xfdc7ae5e, 0x7f2a65ad, 0x899549e4, 0x30004e15, 0xc2642ba3, 0x6b802a17, 
	0x460d4d82, 0xa98e2486, 0xfd01cf2c, 0x846e0b4a, 0xc6ebe730, 0x2348a0da, 0x3a66b6b8, 0x7295a501, 
	0x191437ec, 0xab3efe20, 0xd7f1fdc6, 0xf9c75185, 0x5d09826e, 0x7176c825, 0x92d7eed5, 0xd212a260, 
	0xcacf47f2, 0xe27b92af, 0x1ebb9cf5, 0x6c71701b, 0xf0ce15dc, 0x25eab946, 0x383f4f80, 0xb8ffd27a, 
	0xc79dc103, 0xe8237427, 0x5daf9dfc, 0xb16f1a0e, 0xdbe807b0, 0xb097d720, 0x6c0b7c72, 0xce2976a8, 
	0xf08a53a9, 0x87e66b33, 0x39cae528, 0x1b0ab74a, 0x86a71f68, 0xed8275f4, 0x4686f00b, 0xdd382c7b, 
	0xa35addfa },
// for PRN 23 L1C secondary code
{	0x898b0509, 0xac50aea1, 0xdcfad11d, 0x548c217d, 0xa39c244b, 0xaf750b32, 0xba18430b, 0xa99a15de, 
	0x5a448738, 0x77d08625, 0xb7116be7, 0x30aea146, 0xf2141a32, 0xac0a8725, 0xce025a5b, 0xafeae982, 
	0x94259e97, 0xa0daf678, 0x43eb795e, 0x21834a59, 0x5da8eb8f, 0xa82b8df1, 0xb35bd013, 0xfa0c9373, 
	0xee10f5a6, 0x8d0f45d5, 0xc3616c2f, 0x6a7f5584, 0xfa016e8e, 0x74c4bb9e, 0x0519bf9f, 0xa35bafeb, 
	0x30ea0937, 0x24e79444, 0xd9c542d2, 0x74c1d89f, 0x2b619c41, 0x53c2d365, 0x9609533d, 0x07711000, 
	0xbe0ef04f, 0x80bdc4fa, 0xd5181c7a, 0x1782ad33, 0xdd538c5c, 0xe0879195, 0x963eeb88, 0xb1c1ddad, 
	0x6a6996a7, 0x67a7256f, 0x2556eed9, 0xea354c93, 0x8cc9b09c, 0x0e0d023e, 0xaf594596, 0xfdf4860d, 
	0x8b050970 },
// for PRN 24 L1C secondary code
{	0x33764060, 0xc9d4f845, 0x1bbaee68, 0x25b69338, 0x89024de3, 0x61633560, 0xc43bc900, 0x75269211, 
	0xf452d6d7, 0x5f8dd884, 0x1d28d9d7, 0xa3a4808b, 0x60f08bf5, 0x1f9e1417, 0x3e6d5976, 0xd475fde8, 
	0x5cb82dd0, 0x2edd4c1d, 0x15308b69, 0x99cd0d05, 0x633a432d, 0x368d3d42, 0x925dbc00, 0xe681c75b, 
	0x7317283d, 0xfb215f72, 0xd0b847ac, 0x0ba7adc2, 0xb94235c0, 0xb0caac88, 0xf4c68abb, 0x7b9fbc02, 
	0x99f7f607, 0x3fb1a2e5, 0xc1717ace, 0xb5757bc3, 0x34098a54, 0x32685283, 0x6381e2ac, 0x261655c4, 
	0xfb61a18b, 0x3b3e9b0a, 0xc9d89696, 0x6883cf9d, 0x6fed9568, 0xd8d10a36, 0xf9be3b9d, 0x3c501ba1, 
	0xbfa47286, 0x87da47fa, 0xa937e105, 0x1be9e5e9, 0x7f8d16e9, 0xb76826a2, 0x964f030e, 0xbeffccfd, 
	0x76406060 },
// for PRN 25 L1C secondary code
{	0x87d23267, 0xca81c983, 0xf53a4cca, 0x793a6525, 0xf67f0400, 0x22fe6eb5, 0xf35accc8, 0x617f5c31, 
	0xe093a599, 0xc2310365, 0x8d083ef6, 0x0b5a31d6, 0xd2db4fed, 0x5cc5809e, 0x6b47943f, 0x624e7229, 
	0xccd063d6, 0xa83c2fa9, 0xdb478492, 0xe0e3e98f, 0x785c4c54, 0xbf127581, 0xb3195567, 0xa70ac4aa, 
	0x89e0967b, 0x03e83a64, 0x598c88fd, 0xa6e564bf, 0xbfe1cf40, 0xd25fa0c5, 0x8310761a, 0xfbedfba7, 
	0xafe736a8, 0x0561ed22, 0x62b6efd9, 0x3a64cc7f, 0xa3d6ef2a, 0x56a7c23f, 0x66fe6ef2, 0xe64e13d8, 
	0xd874b2a0, 0xa7840043, 0x2208c638, 0xaa98c5b8, 0x4aabb1dd, 0x0041d1b0, 0xe8f36ea5, 0xba294e8f, 
	0xd3812153, 0x08dd4fee, 0xd389b385, 0x0e6c8e5f, 0xbf15d885, 0x54240e5b, 0x8b94a2ee, 0x2bb678bf, 
	0xd2326705 },
// for PRN 26 L1C secondary code
{	0x7190496b, 0xa1cdafea, 0x4e2b5295, 0xf711bf84, 0xe7595f4b, 0xb2a36cd9, 0x83edb290, 0xc9ec518a, 
	0x87d029b0, 0x18fb0781, 0x3daf3ea0, 0x88afe70d, 0x0ce0025c, 0x33549f08, 0x57be57b8, 0x3f969a14, 
	0x29ece141, 0x8d6c1a9a, 0x63cad826, 0x2cc1fa26, 0x535ea86c, 0x4c615d78, 0x4594302a, 0x4c154ae4, 
	0x4aa14c3d, 0xb2094a7f, 0x13813998, 0xeef35473, 0x4aca3297, 0xf6fc18b1, 0x5b99fc34, 0xd206c36f, 
	0x3feec52b, 0x24dc5724, 0xe750a73a, 0x43e359af, 0xe88c2d38, 0xf2f6a8e6, 0xefc4ec72, 0xd064099f, 
	0xd993bb7e, 0x672bfcca, 0xa243df86, 0xb3b2a170, 0xf49909d9, 0xbdb688cb, 0xa358fe3c, 0xdd7cb624, 
	0xd286b6c4, 0xfb4a50e1, 0x035a95e3, 0x713ad114, 0xe02ef285, 0x01ee9e5d, 0x23a853dd, 0xb00a22d7, 
	0x90496b56 },
// for PRN 27 L1C secondary code
{	0xed96b0b2, 0xbc61ae49, 0xd4a3edf6, 0xfff89f8e, 0x86158c57, 0xc5a701c5, 0x0b2d288b, 0x94401f63, 
	0x11274cee, 0x8807a856, 0x61f0bdd6, 0xe62488b3, 0xa89a516b, 0xd8f3dd1f, 0x401b6e80, 0xd1d68f13, 
	0x21f3416f, 0x37955123, 0x6d6b91cf, 0xdb9bff8d, 0x07f07834, 0x1546d235, 0x35fe4027, 0x366e4ec5, 
	0x0790e3b8, 0xe397842f, 0xcaf460ec, 0x92ecf3f3, 0x735f6eb7, 0x8c385289, 0x253b50a9, 0xe7f03edd, 
	0x21058ae3, 0x1b7b392f, 0x91789cc7, 0x667748b6, 0x715d00e2, 0xccc9ec69, 0x8ab200b5, 0xaa901b54, 
	0x8c067765, 0x3a7ea08e, 0x79aa993f, 0xb850441e, 0x742de0fa, 0xa604dc40, 0x760aeab7, 0xc49743b1, 
	0xf67b3996, 0x3e997d49, 0xe997c8f1, 0xcde6f92b, 0x2e933699, 0x7506e8dc, 0xb2065ed5, 0x7b42e023, 
	0x96b0b2f0 },
// for PRN 28 L1C secondary code
{	0xe78e0fff, 0x561b74e9, 0xe8a37894, 0x6e9d9355, 0x07058b9e, 0x858e0ef6, 0x44455089, 0x14371e14, 
	0x39d749c9, 0xee7f544a, 0xa2b7e86f, 0x07959db6, 0xfa8e3d04, 0x3d8cb254, 0x22e84d88, 0x547463d5, 
	0x2748630a, 0x9527d141, 0x2afb13e8, 0xc38480a7, 0xeff69432, 0xee5e82d8, 0x18b18de4, 0x71188458, 
	0xcdcd3da9, 0x9b91c5b4, 0xe926feaf, 0x58b9af3a, 0xd70d62c3, 0xb4a7a7f0, 0x6b1e90a0, 0xce0bd19c, 
	0x95379dea, 0x9ff088fe, 0xd2131b31, 0x06cd4177, 0x74ae341e, 0xa19b2de2, 0xb7293141, 0xf8a95ae8, 
	0x24312503, 0xfc9d7f22, 0x3e06c247, 0x4f0ceb06, 0xc2b6f2cf, 0xb785fb16, 0x25fe7418, 0x25ea71b1, 
	0x6a08f2d5, 0x969e5a7f, 0xd3c415bf, 0x6395e92a, 0x0b9fe923, 0x37e87b46, 0xd3db50da, 0x35cc3cbc, 
	0x8e0fff18 },
// for PRN 29 L1C secondary code
{	0xebdd834f, 0xfd894d6a, 0xc0f705ec, 0x619f1ca3, 0xada18722, 0xf94ff28e, 0x9e9f785f, 0x4fea0009, 
	0xad752419, 0x28838244, 0x3dc582e4, 0x83aae5e9, 0xd012aa5f, 0xfb9ed9ac, 0xf2f0c319, 0x8f9f2100, 
	0x4fb221cc, 0x409fb31f, 0x4bd7c791, 0x45f25437, 0x3fbbd6af, 0x45a40ac0, 0xa49a95fb, 0x6a4474b6, 
	0xc4dfc032, 0xafa4b0ae, 0xfe8ebdbc, 0x0099897d, 0xcca26cb1, 0x66e22be4, 0xa74c534a, 0x9092d3c9, 
	0x2c351d56, 0xd03a83ef, 0x03cb54c4, 0x27a3b15d, 0x3ea66e23, 0xdb99fbad, 0xb30dab1f, 0xf5f21e83, 
	0xf2df75a4, 0xc1a7a8a5, 0xdaaf989a, 0x109c21c0, 0x3a650e23, 0x17e192dd, 0x5afb9f06, 0x7799ccf7, 
	0x307cefad, 0x5da4c3f4, 0x6238532e, 0x81c21c84, 0xac8cfaad, 0xd28af2c1, 0x92d77da7, 0xe0bc27d7, 
	0xdd834f66 },
// for PRN 30 L1C secondary code
{	0x99df48e7, 0x82a236a1, 0xf5ae4e64, 0x421e0117, 0xb4c08152, 0xefd9c642, 0x268e3892, 0x6d471007, 
	0x583c7273, 0xb887f847, 0xb3938f06, 0x380238ad, 0xd2471c59, 0x5098e6fd, 0x92a040cb, 0xfa201e10, 
	0x499c9d6b, 0x615b1150, 0x79c4bee6, 0x80fac57c, 0x8c37b0c6, 0xbc3dd34c, 0x19920a75, 0x7ceed322, 
	0x38b2472b, 0xfbddec0f, 0xfd340fd3, 0x243da2ff, 0xd692b538, 0x684edca9, 0x8f205d60, 0x060a40b9, 
	0x5ee02034, 0x936437cf, 0x97e6c47d, 0xfad8720a, 0x8bf56c9a, 0xf0bc35b4, 0xbabc019b, 0x07827c39, 
	0x0cdeaaef, 0x861e0c9c, 0x5628cc98, 0x5f72b954, 0xf511fc85, 0x9d9ad343, 0x18b9ca33, 0xec2bf959, 
	0xcf408ae7, 0xb482b99e, 0xc07bc47f, 0x943e2a7a, 0x711e6567, 0xecb5281a, 0x9582878e, 0x4df2cd78, 
	0xdf48e759 },
// for PRN 31 L1C secondary code
{	0xa4617a3e, 0xb4a92f92, 0x2995736f, 0x4ca32fa6, 0xa96fb675, 0x312a4fa4, 0x2c03e2f4, 0xa2a115bf, 
	0xfef73b13, 0xfce9939b, 0x33cd273e, 0xeb01e788, 0xdab2061d, 0xc796150e, 0x88571eac, 0xd436fb04, 
	0x81b2767d, 0x32cc612b, 0x7916610e, 0xa9e6ebb2, 0xdebcefc7, 0x22fc23e3, 0xd272d04c, 0x358dce1a, 
	0x1ecc325d, 0x4abe30a6, 0x002fbfad, 0x2d31e377, 0x999e5fb5, 0xed34fd00, 0x8ee39288, 0x76021b6e, 
	0x0b83aa06, 0xc16a01ac, 0x07c50f54, 0xf9b1bd7c, 0x0cb2177f, 0x07b60f02, 0x797d9cad, 0x1d6053bb, 
	0x8968bf42, 0xbfb0ecbe, 0xc21c5ea3, 0x027e2b5e, 0x682a4849, 0x30980997, 0x613a63c0, 0x127fda59, 
	0xc54264c4, 0xbd833d39, 0x054a5a60, 0xbed82585, 0xcb788716, 0xf45830ab, 0xe2832035, 0x6ffe6ac7, 
	0x617a3eb7 },
// for PRN 32 L1C secondary code
{	0x0f2e5432, 0xd6c5344d, 0x6b36ae0a, 0x79e22c4a, 0xcd652344, 0x36b50756, 0x4f0b22ca, 0xc114c2a7, 
	0x2099f74c, 0xee3d4bd2, 0xc0d846cb, 0x024104a5, 0xc2af2baf, 0xa85b6333, 0xaad4efac, 0xb00cec8a, 
	0xad0e89d5, 0x0e7e6ea1, 0x8020b416, 0x120dc9a8, 0x9ada6871, 0x2dd8cb91, 0x6c9fff2b, 0x4e512586, 
	0x01d37753, 0xfb876cd7, 0x683ac94f, 0x762aa977, 0x0bb6f0c6, 0x3ec9fe42, 0x22b2b5ed, 0x14a781af, 
	0x5fc1df84, 0xade81f3c, 0x797a51d9, 0xd94e7bc0, 0xba7637b5, 0xb0104648, 0x12bb882a, 0x0af707a0, 
	0x2ebbecd2, 0x8117b2a0, 0xe4f8f945, 0x171efd5b, 0x06568fc9, 0xfbec7b34, 0xb26ea1b9, 0x053b5dfc, 
	0x9b3e94b6, 0xe7c473c0, 0xbf71144e, 0x86143da7, 0x618ebc8f, 0x4a867280, 0x0163dfe9, 0x73611f6c, 
	0x2e5432de },
// for PRN 33 L1C secondary code
{	0x8505f5a1, 0xa6c21fa7, 0xc6ec6db5, 0x086cb5b6, 0xf4143cbf, 0x7e29b0b5, 0x21caba67, 0xa36b6f3b, 
	0xd4f59968, 0xb27bd6fa, 0xf6723cdc, 0x86c7c43f, 0x80f843e0, 0xf9b3ec57, 0x5068a2e7, 0xd221f4e8, 
	0x1f7e9dfb, 0xf291a399, 0x5b14a397, 0xc67a154c, 0x7072b69f, 0x80cfb09a, 0x29459b20, 0x551c5b1a, 
	0xb9edf24f, 0x438d975c, 0x04a6f4a5, 0xd6cfaaa1, 0x70f15c95, 0xfc05b5eb, 0x12245983, 0x6afa9294, 
	0xf808700a, 0xd49a5d05, 0xa22b618e, 0x246c213a, 0x0d561b66, 0x2e30f299, 0x08ea4e20, 0xffe1ce5e, 
	0xcc4e64a0, 0xd3612729, 0xc36af1ce, 0x96a325f6, 0x7dab032e, 0x789756c5, 0xb04760b4, 0x562742cf, 
	0x364dbf25, 0x8001bce1, 0x0bc6b48b, 0xc5c2bb69, 0x54ccc16e, 0x2723cce1, 0x7526e2c4, 0x19c7ef9c, 
	0x05f5a16e },
// for PRN 34 L1C secondary code
{	0xd5c80523, 0x12a72a43, 0x25009d5e, 0xc3c63d06, 0xfefa10bf, 0x95dc32c4, 0x6133b638, 0x350ae64c, 
	0x92305bfc, 0x04e9fc97, 0x3f91769e, 0xf1cbe585, 0xe5c21885, 0xdb8ec91a, 0xbaef1ad5, 0x6506d8b5, 
	0xca971bdb, 0x35b23cfe, 0x7801f024, 0xde1bfeb5, 0xc19d15c8, 0x8896741e, 0xba40f4d7, 0xa62d58dc, 
	0xa3bf9fe7, 0x1bbfbb5a, 0x04a3123c, 0x9550ed65, 0x4d74e63b, 0x088ea7a4, 0xeac3ca9e, 0xbf769f29, 
	0x1a06dd9d, 0xfe0026f7, 0x3903bf11, 0x09cd51d7, 0xd1c144cb, 0xde4743aa, 0x55344445, 0x7f1b2025, 
	0xa773661f, 0x4580e6c5, 0x1777719e, 0x31429520, 0xd37a65bf, 0x771d8782, 0x83a26d62, 0x452e1f12, 
	0x3891b455, 0xd94b8e9d, 0x524a62c3, 0x3cdbd314, 0xcd57028d, 0x6b8a30b7, 0x94381d25, 0xac992022, 
	0xc8052363 },
// for PRN 35 L1C secondary code
{	0x02041c98, 0xd1f0c9c1, 0x88228f00, 0x6a7c6d14, 0x05d4df8d, 0x1c693ad8, 0xa50a711b, 0x0357f4b3, 
	0x7a16cb43, 0x39c6e5f8, 0xd7237355, 0xcbcd1376, 0x1f7efa1c, 0x38656a59, 0xb3a911d9, 0x0cb4d70f, 
	0x6298909f, 0x3b0f0bac, 0x59728ca3, 0x09d60e02, 0x299fa05a, 0x5296c0b0, 0xad35252e, 0x1b0f9726, 
	0xe7b97316, 0x8da2ffa1, 0xcce91724, 0x73022edd, 0xa9158f97, 0x89ed88d6, 0x1ead2333, 0x165cc708, 
	0xd196df3d, 0x923f5d02, 0x7e2f7f82, 0x00be1941, 0x30bcf69c, 0x8cf2a0ee, 0xf2aaa06e, 0x7b273f89, 
	0x40ffb7ad, 0xf006963d, 0x80af3fc4, 0x1906c879, 0xeb8acecb, 0x53ac3d05, 0x614d0bbb, 0xd4426ee0, 
	0x08910f2c, 0x8b6efd45, 0xff36ff48, 0xf930f73d, 0xa9a7ac83, 0x839291d9, 0xc3ecd17f, 0x51beb832, 
	0x041c981a },
// for PRN 36 L1C secondary code
{	0xc5cad44f, 0x2b53a366, 0xa6b2b5f2, 0x7a700ebd, 0xc5da99ed, 0x542ea555, 0xc0e858dd, 0xf209d8be, 
	0x7a078df2, 0xbcb8f1b0, 0xbeaddc8b, 0x2b1e5055, 0xcd6e6ab9, 0x02d070a5, 0xe88c973d, 0xb00d05b4, 
	0xf258d76d, 0xfabb2bf6, 0xb4785a32, 0x04f38cff, 0xc7aa4e7b, 0x7f59e49d, 0x7d2a1e8a, 0x9119a66c, 
	0x37a18004, 0x1ae1f59f, 0xb9fbb53f, 0xa7ed8140, 0x29593014, 0x814bbc64, 0x24be14e7, 0xd0ab52cd, 
	0x70d4e03a, 0xf6e025d4, 0xa8d3ef7d, 0x0f4a9c51, 0xd383b142, 0xcb8253fb, 0xcd661c48, 0xb51fcd00, 
	0x9276a00b, 0x348ca136, 0x5e1078f3, 0x99621803, 0x7333aaa5, 0xd2d407cb, 0xea01cd00, 0xada0323d, 
	0xea0996e0, 0x2dbf18d5, 0xeddb678a, 0x330c16f1, 0x459b1c6d, 0x5d3ec84f, 0x89bef6e8, 0x13c05aa9, 
	0xcad44f0b },
// for PRN 37 L1C secondary code
{	0x2c7e3146, 0x41349a21, 0x3a0bdcc3, 0xf04ddafe, 0x4e53e085, 0xf94e55f5, 0x7641f420, 0x7a0b8feb, 
	0x25905867, 0x8fc6908b, 0x6814ac51, 0x1b173a6c, 0x059bf8c4, 0xb5e50f75, 0x0347a1ce, 0x52fd59cf, 
	0xac196700, 0x41f01d92, 0x844ff669, 0xd71edd1c, 0xdcd8ecba, 0xb089bfaf, 0xa116898b, 0x2b035c7d, 
	0xb36be8c9, 0xd33281ad, 0x5ef4e7ef, 0xc393a0e5, 0x19ed896f, 0xacf1d6e1, 0xdd3311ce, 0xccd738a9, 
	0x88ba3732, 0xc43494c9, 0x145d04c9, 0x7f34d198, 0xd8b0d984, 0x9620000e, 0x43603e50, 0xe55f9fc6, 
	0xdb9d0d75, 0x232f4636, 0xcacd6b7c, 0xc631fd15, 0x1904f853, 0xc3aae080, 0x5ba4ac04, 0x9b060dc7, 
	0xf403d6a9, 0x756442f7, 0xd43cd193, 0x41c4e98b, 0x57fc7fd3, 0x4abc5db5, 0xf783b083, 0x6eb89c59, 
	0x7e314621 },
// for PRN 38 L1C secondary code
{	0xdaa51b11, 0x82ab7b3f, 0xf38aa51f, 0xa746b980, 0x7d2f3e73, 0x65c8db8f, 0x952d2808, 0xae1e73db, 
	0xdaca9946, 0x07203eca, 0x0975701a, 0xe0b7713a, 0xce65f2af, 0x6f54d91d, 0x2a5ece31, 0x3a125ee9, 
	0x257bbeff, 0xf2466b7c, 0xeb86845f, 0xd4744487, 0x5a9fdcd7, 0x34431243, 0x2a9476af, 0xfa6c62d4, 
	0x54143c98, 0xec9ad96c, 0xc4e30bc0, 0xcb32ff61, 0xc6dcec37, 0x11662151, 0x87691bf8, 0xff4ad096, 
	0xebb368a2, 0xedd893be, 0x5d3b2802, 0x35a8e4c1, 0x2853f45c, 0x1191a25a, 0x0b5c1762, 0x1c174cb4, 
	0xbf711545, 0x36c97d0b, 0xad94a5c9, 0xd8924c29, 0x508e4c26, 0x3d5cadda, 0xb411ccc7, 0xde1641e8, 
	0x9b01520f, 0xbc3ba38a, 0x71fb4eee, 0x6f005bdb, 0x0e52160b, 0x23de2bb2, 0xc0c0f105, 0x1ef12823, 
	0xa51b1175 },
// for PRN 39 L1C secondary code
{	0xb29c82a4, 0x245a6d24, 0x256efce9, 0x9a2cf9b1, 0x4e033764, 0xe2bd8f0c, 0x50eb7647, 0xbe079793, 
	0xae4cde4b, 0x1a54bc8a, 0x8393da09, 0x4bb2b00f, 0xeaa61350, 0x04b9a593, 0x5f0b1736, 0xe75e3efa, 
	0xa5389d4c, 0xd47ac9c7, 0xab0e5424, 0x608cd13b, 0xf8e6d0eb, 0xd4f2b677, 0xaa858368, 0x59b41cea, 
	0xc53fdd30, 0x4e205b4f, 0xec5c5f9f, 0x07b78647, 0xa2af3b65, 0x39a16a42, 0xa19c4f5f, 0x172d98a4, 
	0x7ab028fb, 0xe2142890, 0x357dde22, 0x436245cd, 0x765c5339, 0x0e3b2c9a, 0x3127fcfb, 0x19c50ca4, 
	0x6152c120, 0x6e071c61, 0xb7982960, 0x9204a668, 0x6e28dea3, 0xd0e48af0, 0x2b6b5e2e, 0xe70127e3, 
	0x16b422d9, 0xf33f6266, 0xb5a1991b, 0x039e6d10, 0x5b531f92, 0x9c2dd1eb, 0x51d83d44, 0x812715ec, 
	0x9c82a494 },
// for PRN 40 L1C secondary code
{	0x20048c56, 0x4ed801ae, 0x036e40e0, 0x24008eb0, 0x412a2d46, 0x626f6424, 0x562a5860, 0xefff28ba, 
	0x9adb0fe2, 0x9f4103af, 0x28caaafb, 0xdbe3913a, 0xf6365216, 0xdaf43094, 0xc79c4f0d, 0xcf6a595a, 
	0x99b159fc, 0x1af12d8b, 0x1215c31b, 0x2434e2f8, 0x5fe53b8e, 0x13ba80cb, 0xf4423c59, 0x17f34f39, 
	0x2d64ca32, 0x5bd3a160, 0x2af69336, 0xf9c718d4, 0x2bfa345c, 0xec92bdc7, 0x46c7dbae, 0xbb1568b0, 
	0x3aadc0e9, 0x95e0cb5a, 0x33917e56, 0xce19c759, 0x3b278b05, 0x08b68f87, 0xc9e13417, 0x5e75e323, 
	0xc90e4cbf, 0xdbe7f84f, 0x06b3641d, 0x59b02ea9, 0xc6109231, 0x089b4f6d, 0xca0f0e03, 0x2aa77fd7, 
	0xb4b5b2db, 0x96a126c3, 0x285a474a, 0x69c3b65c, 0x9b7a7de3, 0x3a10445c, 0x14ba6a43, 0xc910df48, 
	0x048c560f },
// for PRN 41 L1C secondary code
{	0x27c76469, 0x8fcf994b, 0xf9170e13, 0x819679b3, 0xb895c44c, 0x366593d9, 0x325845d8, 0x2bc590dd, 
	0x5427aec6, 0x88567f7c, 0x9f76cdb3, 0xca89dc1d, 0xc59a8189, 0xdb10ddff, 0xb83f9692, 0x268b7240, 
	0xcbc062a7, 0xb42fd0a8, 0x0f7180c4, 0x3adf1f35, 0x8e501ad6, 0x89e085ee, 0x28cb2830, 0x1d093601, 
	0x5977d414, 0x72dfc4ad, 0x35831b4d, 0xfd77e44a, 0x641c808a, 0x7d47442b, 0x65eace64, 0x77ed5394, 
	0xa4658d10, 0xfd3eb4d3, 0x14feca10, 0x441613a9, 0x85509aba, 0x33ea914b, 0xd9f04c9e, 0x9f487924, 
	0xc6f088e9, 0x37c7c95c, 0xb2a2252d, 0xa6227514, 0xca176704, 0x67b1ed0f, 0x7c30a8b9, 0x64d65eae, 
	0x656198f2, 0xc6775ba3, 0xc207a56d, 0xc0865bb4, 0xdcc76d4b, 0x0d4d8bb5, 0xd64c9e33, 0x187ceaf4, 
	0xc764692a },
// for PRN 42 L1C secondary code
{	0x38de9a88, 0x2213fe7b, 0x2e02be27, 0xaf7c67e1, 0x9ff0e6b9, 0x20d88d24, 0x9a676a11, 0xc3ce104c, 
	0x9f50c416, 0xac1210a8, 0x0741b6c9, 0xd29e0842, 0x6b0ee1fa, 0xf8fac87b, 0x5af17ff7, 0x36a7586d, 
	0x3f461b6a, 0xa1a2e6b0, 0x32c6be9d, 0xfcc73e6f, 0x2c7f9a78, 0x2ccd0cc5, 0xe3bf00b2, 0xb9e37788, 
	0x0f27fb4c, 0xb61b2165, 0x19f9bed5, 0x4d35793e, 0x9c1aa4c2, 0x2a27752e, 0xf20fa101, 0xad5f8bd0, 
	0xd1177d00, 0x451515cf, 0xb997c2ff, 0x5c8cfac2, 0xa00d4085, 0xc4d1543c, 0x6bb9f126, 0x8746707a, 
	0xf3f1918b, 0xd1c1426a, 0x224f8d70, 0x1147f4aa, 0x9d62b297, 0x671b7e4b, 0x12272293, 0xb55715cf, 
	0xa0663b8d, 0x2afe7f33, 0x51c2d546, 0xbf0159b3, 0x7cec4509, 0x4288dcfb, 0x366a03f6, 0x8aad0e2b, 
	0xde9a8851 },
// for PRN 43 L1C secondary code
{	0xe0248100, 0x960e1f4e, 0x939e2636, 0xf392b55a, 0xe0d2d8c8, 0x480ee5f0, 0x731a0102, 0x87fb4810, 
	0xf74a6083, 0xe39beb94, 0x0571aeb4, 0x802d3975, 0x0d932f36, 0xe2f6ff22, 0x47ebd85a, 0xac6887c1, 
	0x1320f81d, 0x9795fcb4, 0x7d536abe, 0x310e697b, 0x95294451, 0x0953810f, 0x4349386e, 0xd06b6280, 
	0x51c55e19, 0x65e60b79, 0xea3eeee3, 0x5c58f925, 0x35afe7fb, 0x22e12022, 0xaa4624d7, 0xa23069e7, 
	0xddee3053, 0xc5889309, 0x8cf1df61, 0xaa0a67c5, 0x8dd2376d, 0x1afa9597, 0xe2a1baba, 0xf1feb7e9, 
	0xccc6a2f1, 0x718e973e, 0x2dd36da6, 0xd3b80bfb, 0x8c36006a, 0x7f3b84e7, 0xbd11ae7a, 0x930efa2e, 
	0xdf83e75c, 0x9400fc39, 0xaa143748, 0x61662dec, 0x47f686ed, 0x14d67e94, 0x41262bb7, 0x0db1f918, 
	0x2481006c },
// for PRN 44 L1C secondary code
{	0xd5b1e484, 0xec153876, 0x12e21c1c, 0x797d5411, 0xff487eae, 0xf92cadf3, 0x92435146, 0xd38e3286, 
	0xadcd0f1d, 0xaa399c55, 0xb8f0b3b5, 0x614c71cb, 0x628ac249, 0xcfb5349f, 0x757e12ff, 0x882abe9e, 
	0x38384748, 0x6e1ca837, 0x21278dab, 0x9d642e03, 0x9d6e8aa9, 0xef1cb5ef, 0x318dc102, 0xd1e23fcc, 
	0x5c6237ab, 0xfd7a0e0e, 0x426c58a2, 0x215cd7c9, 0xbb48e223, 0x0582497c, 0xcdedc05b, 0x52cd81e0, 
	0xa3b487b6, 0x0ffb3966, 0xabced80c, 0xf3e92d93, 0x49149603, 0xb34c6ea9, 0xf4d6d2e9, 0xaff280bb, 
	0x6614eaf4, 0xd592d368, 0xde674777, 0xfcbafa81, 0x0a649664, 0x8e054620, 0xa81af073, 0x49867ea2, 
	0xef9d4ef6, 0xc81feed9, 0xf3bf7a1d, 0x5b799d6e, 0x648112a0, 0x1bbc1fea, 0x80580116, 0x8cc519db, 
	0xb1e48428 },
// for PRN 45 L1C secondary code
{	0x091883b9, 0x992001f1, 0x014925cf, 0x9452f904, 0x1fb3d2d8, 0xe2fc1ae3, 0xf2a58b20, 0xabdb4d68, 
	0xb6c17273, 0x78f5fb8a, 0x7497a9b7, 0x4ac45b15, 0xb59f0162, 0x91deead9, 0xcb2f53ad, 0x1d799c05, 
	0x3d517eda, 0x663d8cea, 0x58137e47, 0x5e723f3c, 0xe6f4a544, 0x279ec942, 0xd293ca45, 0x0a30df18, 
	0x3978b116, 0x65225bfa, 0x9f78fdcc, 0xc6abe3f1, 0x9e2ea2f8, 0x32bbbb2b, 0x1652c58f, 0xc096de12, 
	0xdee844c1, 0xd3f8fd10, 0xd04634f4, 0xb8f7f243, 0xac90207a, 0x69e20723, 0xaa2423e0, 0x94c72ae9, 
	0x5b7bf25f, 0xc6d3fb2e, 0x104d8669, 0x8f2e3ae2, 0xc0559f62, 0xe3be70a0, 0xe822fac1, 0x1225011d, 
	0xe8a9f643, 0xf821b863, 0x1be4ad4d, 0x46ffc261, 0x25254d0f, 0x95ea4b09, 0xa9292434, 0xffd8bc2c, 
	0x1883b990 },
// for PRN 46 L1C secondary code
{	0x5387c5eb, 0x125df431, 0x0e59dad7, 0x6ebf9ad8, 0xb250410f, 0xd7ab6679, 0xc1f31445, 0x6563eeb7, 
	0x57c07999, 0xfe48c122, 0xe9befb64, 0x453d00f7, 0x2f1cd3c9, 0xa07d75a2, 0x7283cf67, 0xcdba63f4, 
	0x7b73bc0c, 0x13c86d4f, 0x52de3f52, 0xce8e721a, 0xeb65a4b9, 0xc8d6452a, 0x7f00823f, 0x8c015cfc, 
	0xcbe84aa0, 0xa5092b41, 0xfec5ddb5, 0x18779763, 0xa7e9bc41, 0xefb42dc7, 0xb168953a, 0xb2064d93, 
	0x56d33ab6, 0xb2e28e4c, 0xb4ddd7d6, 0x3183dc8c, 0x12949d21, 0x2378bf15, 0x1a84d97a, 0xb9a76b39, 
	0x94443956, 0x0050df37, 0x44120734, 0xbbb400d4, 0x331d8dea, 0x4eb3005b, 0x997d7c2d, 0xd39d300d, 
	0x659ffb8a, 0x49fb843d, 0xf93e2276, 0xbf24dc88, 0xf34d7843, 0x7396a3bf, 0x7d336019, 0x9ae5687d, 
	0x87c5eb01 },
// for PRN 47 L1C secondary code
{	0xf428301d, 0xb4f1aa22, 0xa75e67b3, 0xb85187c1, 0x59ce6508, 0xf4273206, 0xbe7c6c8e, 0x956fc11e, 
	0xc7ce0f57, 0x850f7fc1, 0xb27d58d7, 0x46c22aa5, 0x380e96db, 0x57673366, 0xf601ed05, 0xf34eb948, 
	0x214b1308, 0xce7db17d, 0xf144221e, 0x702c392a, 0xee88cdd1, 0xae2774c1, 0x61397998, 0x62bc1935, 
	0x48aba6b8, 0xd5be1082, 0x59ef924a, 0x8bfabf26, 0xc9bf3678, 0x1786387f, 0x8564e42a, 0x02b90b92, 
	0x9e07b7c1, 0x20fdf0ba, 0xa44d502d, 0x19c1b343, 0xd463699d, 0xd592a573, 0xaf16cb00, 0x6a1d87a0, 
	0x5b1a401c, 0x04fbfe6a, 0xa52c9f42, 0x431a3044, 0xf56d5753, 0xcba34b7a, 0xc5d30000, 0xb6af5ed2, 
	0x58c2caea, 0x34a5220c, 0xdf2042f9, 0x58da567f, 0xb8563802, 0x68f505e1, 0x49ab00d3, 0xc62bcea5, 
	0x28301d9e },
// for PRN 48 L1C secondary code
{	0xcb712691, 0x7a74b23f, 0x50276b01, 0x00d15f45, 0xfa3cb9fe, 0x4536a5ca, 0x1c5d637a, 0x0d13f281, 
	0x34bf7328, 0x70fbc48d, 0x11574c56, 0xc4d4ba8b, 0xf53f50d7, 0x87e62f4c, 0xa9df528d, 0x3b9bd289, 
	0x3a25ad1f, 0x28127b28, 0x99b78158, 0xa55737c3, 0x85739649, 0xfc631a82, 0x222b7b5b, 0x1cc6cea8, 
	0xb57f37ac, 0xb58b0816, 0x0b81f9fb, 0x7ae07004, 0xa4b5be16, 0xb58457d7, 0xfee8355f, 0xe7f59b93, 
	0x76c2ed8d, 0xc9f26e8f, 0xc3d72119, 0x6fb2973d, 0xf89ab6d8, 0xf80d241c, 0x0fc64851, 0xbd804de6, 
	0x432a6166, 0xabeabf39, 0x1079a705, 0xc79dcc00, 0x7228400e, 0x26c7b610, 0x6d8c6dc5, 0xa816af21, 
	0xb4e5ade9, 0xad02b2f6, 0xc636d09e, 0xbc6c9476, 0x4289c10d, 0x773c6e00, 0xb3c10006, 0xaafab41c, 
	0x7126919f },
// for PRN 49 L1C secondary code
{	0x8d45b490, 0xae5ad99d, 0x6c0cfd21, 0x043f14f2, 0x0356f50d, 0x89ae66ad, 0xbec90087, 0xc866a22a, 
	0xc5edb844, 0x52847472, 0xb0826879, 0x02470b41, 0xf04ee549, 0x092a7720, 0xd82d0e24, 0xa9e16410, 
	0x34e2e214, 0x3221db7a, 0xd5445661, 0x1e100937, 0x0b566759, 0x0b0af6ac, 0x64f28fc2, 0x584bf301, 
	0x1b99b5a7, 0xe092da2b, 0x36295f2e, 0xbd5b7749, 0xc42ba00b, 0xcbbaffd3, 0x0d2b1d16, 0x52e0d9db, 
	0x44f32efd, 0x581e3031, 0xd263b628, 0xe0f9e7ba, 0xa45b42f4, 0x1fa94df8, 0x394d7d3c, 0xc59f0fc0, 
	0x9279bd30, 0x1a0fdf87, 0x7758889f, 0x4ebb0a5d, 0x3cf66879, 0x2f349041, 0x6ffd4783, 0x56981573, 
	0x17c06e6a, 0xa8165c5d, 0x5aa53b09, 0xbf2277e5, 0x8dd10544, 0xad308379, 0x35fa0f75, 0x898fb6b7, 
	0x45b490cd },
// for PRN 50 L1C secondary code
{	0xcb6a2e46, 0x507d8740, 0x847fdfc9, 0x4e3fc0f5, 0xd71daf4e, 0xb869433a, 0x877cf3cf, 0x3ad730a5, 
	0x1c9cbd6e, 0x886bc0ff, 0x82a4feff, 0xb4c0b86f, 0xb6989d15, 0x5dccb2be, 0xc9839895, 0xada7674d, 
	0x7bdeb94e, 0x4ca656a6, 0x3e6b6e02, 0x97e3e67b, 0xcc3a2d5d, 0x89a1df2f, 0x8aac0a35, 0x0651fce1, 
	0xee7c00a1, 0x8c39bafe, 0xdb0523c2, 0x44675029, 0x82a6c235, 0x7cee21d2, 0x093858de, 0x3f61174b, 
	0x55c791d1, 0x88de3710, 0xcea64721, 0x6123165f, 0x0ca10255, 0x857e5084, 0x7bd9e2d2, 0x7d09dfe4, 
	0x357a4b90, 0x25c406ea, 0x944d8b61, 0xc98eb9cd, 0xf172d10b, 0x9999968a, 0x0bd0bf26, 0xfcd0536b, 
	0x752a7789, 0x45fd64a6, 0x367bfcca, 0x9ff4a0a9, 0xc3522860, 0x1d0f82c1, 0x509b0b87, 0x176f220c, 
	0x6a2e468b },
// for PRN 51 L1C secondary code
{	0xa4a62c09, 0x1e5ce353, 0x7dfb40de, 0x206d2715, 0xfc053f54, 0x54d53c5c, 0x3e0952ba, 0x13270380, 
	0x898a33f3, 0x0c7c969a, 0x1c45826f, 0x0a9af336, 0x76277694, 0xe972d3c6, 0x9f2d1d72, 0x8a00b4cd, 
	0x572295e1, 0xa6e05b59, 0xff032df7, 0x46ae9d76, 0x6ae093a6, 0x5bcdb323, 0x1b51c37b, 0x267a1855, 
	0x59e04d40, 0xf36c7b97, 0xd2ce7e9e, 0xc05b98ed, 0xb84c5c0f, 0xc82a8141, 0x05324ccb, 0xf4192473, 
	0xa5fd385c, 0xadcad3b8, 0xd0f8e199, 0xbd003751, 0x595dfad5, 0x5ace8166, 0x8674da39, 0x52a4a852, 
	0x4c388976, 0xb432d432, 0x7ea75345, 0xc48d242f, 0x40e60ef1, 0x59fbd178, 0xee1cd355, 0xeed60b55, 
	0xe2912fde, 0x8b31fb2c, 0xe0d09eab, 0xcfd1ec33, 0x67e1b2e2, 0x0ea7c8dc, 0xad2330cf, 0xa997af4e, 
	0xa62c0925 },
// for PRN 52 L1C secondary code
{	0x8d9ecb4d, 0xf3052d0f, 0x0d5e1971, 0x4e764058, 0xcb17c940, 0x12331c5a, 0x3b91bd7d, 0x6103f193, 
	0x632f3636, 0xa12e315a, 0xb495cf30, 0x3d056c2b, 0xb269c834, 0x7b5358e3, 0x6890f54d, 0x77ab8bb1, 
	0x46f00659, 0xc9c147e6, 0x8c0c6f33, 0xe4eaa7a4, 0x9ac37638, 0xc345c358, 0x3ad4923d, 0x485079d3, 
	0x66bc0cce, 0x8f67fe31, 0x126ec8b9, 0xd003d43c, 0xe88e27b9, 0xaee94592, 0x5d18fa28, 0x2f6872f9, 
	0x55e376b8, 0xdfb02ffb, 0xaf93f396, 0x6384c4f3, 0x7aead550, 0xc8020398, 0xfb5d7e77, 0x1a9a5264, 
	0xd22d90a7, 0x3e4dc8af, 0x3d07e1e3, 0x2450bb30, 0x178f3579, 0xb9f5bc59, 0xe46d10ca, 0x56b53285, 
	0xb1a34834, 0x8025bdd1, 0x2156d05f, 0x23c75bd9, 0xae3c47fe, 0xb6a849bd, 0xda401fa0, 0x2c58d8bb, 
	0x9ecb4dc1 },
// for PRN 53 L1C secondary code
{	0xe14409c1, 0xcba2f050, 0x65088530, 0xed3b9227, 0x290b290e, 0x5886b4fb, 0x5983ba11, 0x8aea7673, 
	0x6568bb76, 0x89cf74fb, 0xecfb18cf, 0x375a5dd2, 0xd8f02b51, 0xd9383890, 0xeb011d89, 0xb4a39921, 
	0x95a9c7a7, 0xa481e3fa, 0xddc07315, 0x5600d7c4, 0xd56f0903, 0x9430b9c2, 0x2ff95b78, 0x7868cc87, 
	0x81158834, 0x7349fb5f, 0x2770a0dd, 0x2b5d1090, 0xdc4b88a1, 0x8ddc598d, 0xb70a6e94, 0xf006814b, 
	0x7a2b5123, 0xf7bd622c, 0x66b2d3c4, 0xc5059104, 0xc6e98de4, 0x29995b03, 0xf152ba0e, 0x8bc595b6, 
	0xb9fa970b, 0x1cd677f6, 0x0c34f0d9, 0xfbcf3ea1, 0x7e8253f6, 0xabe2dd67, 0xffba475c, 0x56ef6520, 
	0x9d541406, 0x055ee8b2, 0x8eaef3ff, 0x8d911a4f, 0x581dbc5f, 0xd4ab64c7, 0xb8c9b54a, 0x7e8f6e06, 
	0x4409c16c },
// for PRN 54 L1C secondary code
{	0x977b8760, 0x32941cb1, 0x5e8b41a5, 0xa6a3b742, 0xc4cab3c7, 0x44437521, 0xa4060789, 0x46d2992e, 
	0x368aadd4, 0xa06765cc, 0x2cf68d25, 0x87a99d68, 0xc5e37548, 0xe0f6474d, 0x37f90ad3, 0x0fabd39d, 
	0x0f366053, 0x5a496c02, 0x5cf86b2e, 0xa7f9babf, 0xe4a36494, 0x6e7a6b3d, 0x4c374274, 0x3e88846f, 
	0x87b80026, 0xd8c43001, 0x0323f815, 0x3e3928f4, 0x44cf969f, 0x6949b37f, 0x473e27c2, 0x1df5fdc6, 
	0x42f88360, 0x41061262, 0x2d31a394, 0x90a29627, 0xbbdb3e54, 0x13c3d99e, 0x91a7df29, 0x1d75488a, 
	0xcd345732, 0x9ad726d4, 0x3c963ebd, 0x09fd58b4, 0x676ccd71, 0xf2d9061e, 0x3a045901, 0x71691d73, 
	0x7d8e0fdc, 0x66ab474a, 0xa7fe65f7, 0x551e34fe, 0x8aaac935, 0xfe57f2c7, 0x566efa67, 0x1be52e2d, 
	0x7b876007 },
// for PRN 55 L1C secondary code
{	0x753755e4, 0xa9ac78d4, 0x3b64d44b, 0x459cfc5d, 0x17f3e8f9, 0x4a48c95a, 0xb0729c82, 0xd16424c0, 
	0xadf84829, 0x742b041d, 0x60ed2d3f, 0x0dbac768, 0x86b32fe6, 0x2290e827, 0x0ff73de6, 0x75dcdfcf, 
	0x0d9fc146, 0xdd52e109, 0xf5cf04c8, 0x8f1dfc00, 0xa855077a, 0xe43a44b6, 0xb3b6145a, 0x070862ad, 
	0x09d96fe2, 0xe3cd623a, 0x53a204a1, 0x6af7c126, 0xe6d93ebd, 0xeb29a85a, 0xdd85fedb, 0x894db113, 
	0xef0def97, 0xa9458acc, 0xbc5a59a8, 0x61aefb71, 0xd1454b9e, 0x6a22609f, 0xba0c7baa, 0x876588f8, 
	0x0be1b0b9, 0x2b737123, 0x444186ea, 0x669ca730, 0x4756ab13, 0x74c47d77, 0xa43ac04b, 0x2c2cde8f, 
	0xe331058f, 0x1110a231, 0x198f188a, 0x6869e341, 0xb84be276, 0x465da406, 0xd5c5dd7c, 0x72cd91aa, 
	0x3755e4ca },
// for PRN 56 L1C secondary code
{	0xad58bef9, 0x36ea23c8, 0x874b4381, 0xdbf73a6e, 0x8c6b507b, 0x91c28b78, 0xd0163b08, 0x15c45ec1, 
	0x28d7fde3, 0xe46381a2, 0xb845cdef, 0xa56352fc, 0x7aa71923, 0xd196e7db, 0x1628dc6d, 0x69600f74, 
	0xef1b3128, 0x86911770, 0x03782bc2, 0x9a8daede, 0x1f7894c2, 0x2bd0d5ab, 0x91db98c9, 0x57cfaa90, 
	0xa32c5aea, 0xb9e5fb2c, 0xf412c92a, 0xb16430d1, 0x37ce3fa2, 0xd78ea08c, 0x72258a27, 0x860ca467, 
	0x3ddf9465, 0x9af77d59, 0xe7f1baf9, 0xb6fe6c13, 0x6c86f536, 0xa5305c2f, 0x4595d62f, 0x1f2d3352, 
	0x466dd5e3, 0xed11bfdc, 0xaea4b2d6, 0x605a13a9, 0xf3560860, 0x260bc464, 0x0a90046e, 0x7484ec7e, 
	0x5c554376, 0x64198426, 0x36905158, 0x0abacdf1, 0x5057bdea, 0x6c8fb35d, 0x261a8a09, 0x3a642198, 
	0x58bef9aa },
// for PRN 57 L1C secondary code
{	0xd4130d6a, 0x2ea3c77f, 0x126fd218, 0xcc214eb7, 0x228458f4, 0x19dae963, 0xad9ed7ad, 0x0c835418, 
	0x21733cdf, 0x46013761, 0xb5bca553, 0x1b566516, 0x56cc43fd, 0x60007142, 0xe77bc647, 0xcf7e5880, 
	0x769647a1, 0xef7c2246, 0x24d1c7bc, 0x56d3e2bb, 0xb3e15c9d, 0x1a221f9c, 0xcffb4d83, 0x63476a4e, 
	0x9423d2d0, 0x63747dc2, 0x2f3b86d9, 0xa7e4a027, 0xa5b567c3, 0xf01ddd66, 0x618327c9, 0x4165f753, 
	0xfe1c0894, 0x85f54aa3, 0xe10cdc03, 0xa0b07a0d, 0x5e8a686e, 0x2e0db36c, 0x75580066, 0x55107ffb, 
	0x49d892c6, 0x5b516084, 0x3d30e699, 0x6cf5fac9, 0xcf2f9d01, 0x8e7f5812, 0x7bd5add1, 0xd1505a90, 
	0x6ce39a82, 0x8b1e8bbf, 0xd25e05df, 0xd1259312, 0x922f2853, 0xe92d2326, 0xe347ee81, 0x1cdbf745, 
	0x130d6a67 },
// for PRN 58 L1C secondary code
{	0x6aa6f9ce, 0x73236ab2, 0x7d04e99e, 0xfb038703, 0x39e65c82, 0x59355b13, 0x2dce7d95, 0xe0df08a0, 
	0x529352cb, 0x8ede06f0, 0x8aa4459d, 0x63e1e3b1, 0x3aedae9b, 0x494efeaa, 0x5dda83b3, 0x814b937a, 
	0x74f8c403, 0x5b840b18, 0xcde13c0d, 0xd64004dc, 0x08392986, 0x1152b43c, 0x59551cf6, 0x8414f65f, 
	0x9eacc52f, 0xe84c1b33, 0x5cb0dd81, 0xa21dfe64, 0xb68c7118, 0x5d72cf99, 0xd4123525, 0xe044eaf0, 
	0xcf34d6a3, 0x950831c5, 0x1bbfa8ae, 0x7f99ff26, 0x9ccfafe9, 0x366cd52d, 0xe1a48404, 0xd29a6c53, 
	0x2c304a7c, 0x2876ce2a, 0x4c57e9a3, 0x9307c809, 0x3c4dcce7, 0xb0568850, 0x93611ee0, 0x98f5be08, 
	0xad14dd9e, 0xa831351e, 0x665f5fc3, 0x9f5faec1, 0xddca75d9, 0x10de63ff, 0x50351624, 0x6b6322d4, 
	0xa6f9ce7b },
// for PRN 59 L1C secondary code
{	0x9b392965, 0x2c2b8e4a, 0xa868cd66, 0x39b2a4e3, 0xb04b4d29, 0x2253ffbf, 0xdb88c3dd, 0x2c3fba54, 
	0x7c519e2d, 0xbdec0f69, 0xdd68c1a8, 0x0f98552c, 0x1b28e365, 0x3b6499e7, 0xcb1c8272, 0x21c3fbb3, 
	0x2e86fefb, 0x5e6e623a, 0x22a55ed1, 0xa2c69c26, 0x45fb0119, 0x9f7d14b1, 0xa92f7ad2, 0xb26a7661, 
	0xe41ea93e, 0x478f1c3b, 0x6f50d96b, 0xa9a0930c, 0x5e7b52ed, 0x1ae4b876, 0xb97fd05d, 0x61bf4de1, 
	0x0e298875, 0x84528c74, 0xeb0c72b4, 0x6ec1ffa2, 0xc020d6ee, 0xfa019218, 0x6a17707a, 0x99d4cd5b, 
	0x9ccb4ef0, 0xd4b866bd, 0x03261f05, 0x1598ddbc, 0x155fe2a4, 0xdc2499a3, 0x46ab5ff5, 0x30cf3e26, 
	0x0d809da0, 0xf1cba3de, 0x6d455f7e, 0x5358aa42, 0x46219c77, 0xc9daeca8, 0xa3b2ad4c, 0x7b81a212, 
	0x39296571 },
// for PRN 60 L1C secondary code
{	0xaf1fd2e0, 0x605700b6, 0x7f1e64a2, 0xf4816806, 0x70ee8ef6, 0xca6ba083, 0x99774fee, 0xa105ede4, 
	0x74f3316a, 0x02b58265, 0xe800606c, 0xef178bdc, 0x97483d38, 0x13a9421d, 0xa7fb8533, 0x8bf868f1, 
	0xd0334b94, 0xafe8392f, 0xb31d2eca, 0x651214c8, 0x82d35ee6, 0x155a4e83, 0xc51cf6be, 0x3d118454, 
	0x89c872bf, 0xd60861fd, 0xfc75c802, 0x573747da, 0xb958050d, 0x0f5dc892, 0xf66231eb, 0x45f1a79b, 
	0xf801470b, 0x0fb0889a, 0x12f4bc48, 0xc08738c6, 0xf85fbd08, 0x0f6afb59, 0xbf69e8db, 0x4e5264b0, 
	0x6f227c54, 0xd366f381, 0x2a9ff767, 0xc8d2ffe6, 0xb2c7c1e3, 0x264d07a5, 0xc633b7d4, 0x76f6cf1c, 
	0xa55aafc9, 0x9796936b, 0x0c531514, 0x737ebdc0, 0x16457664, 0xa805593a, 0xa89a1726, 0x5fb3899b, 
	0x1fd2e0ef },
// for PRN 61 L1C secondary code
{	0xc6d4e7a8, 0x0b0bf2e9, 0x08bd8218, 0x89d9ba77, 0xabc3d108, 0x151d974c, 0xd5f786b7, 0xb33c8448, 
	0x4e6ea107, 0xe8652a98, 0x6b4e2d3f, 0x37cfc773, 0x73c8bab7, 0xd3ca68a5, 0xd9ae097a, 0xa5328d2e, 
	0x54fef417, 0x7d5ab862, 0xfec068ee, 0x763972c3, 0xf5afe3cc, 0xd94b0136, 0x0bc032fc, 0xae1fee9a, 
	0xd9ab532a, 0xf4eeb348, 0x360ad5e4, 0xdcacbb80, 0x40bc3e85, 0x6d942b34, 0xba9c6c44, 0xbc6e00be, 
	0x48699183, 0xc041a490, 0x2f1beeb4, 0xed6669ec, 0x428d49e4, 0x0761ba90, 0x7487af66, 0xbea49d97, 
	0x4f337c9a, 0x04a5e697, 0xb7a4d8ce, 0xe093da32, 0x73217064, 0x86610202, 0x84ce4040, 0xc907260e, 
	0x25ed4c5b, 0xa520731b, 0xccf2e967, 0x257d593e, 0xe12ee9b9, 0x86e066f5, 0xb142095d, 0x66b72792, 
	0xd4e7a896 },
// for PRN 62 L1C secondary code
{	0x4fba05df, 0xd5648118, 0x6a1d0c1b, 0x9ec8951b, 0x0af77eb6, 0x031ff04a, 0xe4253010, 0xa41823b3, 
	0x82d20078, 0x5806aa3d, 0x5d2418d2, 0xac36ad5b, 0xbaa29393, 0x8e9693f8, 0x6ba7e363, 0xcaf08d86, 
	0x571a4669, 0x571f0532, 0xc5d4a976, 0xa1888aa7, 0xdb842bf8, 0xe730baa8, 0xfa837997, 0x2dd9c2d1, 
	0x1afb0fc9, 0x2c41dbff, 0xab3b5b58, 0x57707b46, 0x750b29de, 0xcbceab01, 0xbc8377e1, 0xf7cc559b, 
	0x7c88e51a, 0x2e70e30a, 0xefcc24f0, 0xa3dee19f, 0x8889f45d, 0xd27320be, 0xe3bb896a, 0x5eb29613, 
	0xae4d9784, 0x68bb332d, 0x91d96122, 0x1186fe50, 0xfcdf5d5e, 0xd270c5aa, 0x28a4050d, 0xb0863e34, 
	0x33c3c4c9, 0xd78c479a, 0x151256e5, 0x9284d009, 0xeaa4a70f, 0x4db93f4f, 0xf3d3cb4b, 0x91be2b99, 
	0xba05dfe9 },
// for PRN 63 L1C secondary code
{	0x5fe095ca, 0x8c74c53f, 0x4ef78a55, 0xaee0365b, 0x288cef49, 0x6c7162d4, 0xdf335ae6, 0xc3b9757e, 
	0x8e5d2263, 0x79a7abc3, 0xc62070a9, 0xc240813b, 0xd57838a6, 0xea4a1c20, 0xfda9d97d, 0x2af3c04c, 
	0x2f9eb0fe, 0x5a27c33a, 0x5167a3c1, 0xcce84049, 0xb2ec4be1, 0x0a8b9a0f, 0x96dfaa0c, 0x43e1da79, 
	0xf296efad, 0x22de59cd, 0x26ffe6d2, 0x951c16f7, 0x749b9463, 0x92c617f7, 0x3c626cb1, 0xc8b6da4d, 
	0x4a0b42f0, 0xa82cace2, 0x267a13f9, 0xf186c618, 0x8fbefeb0, 0x5ed7d450, 0x64769848, 0xef3cf812, 
	0xdabb19d1, 0x34f0b193, 0x5c612f5b, 0x9dee9911, 0xc76480fb, 0x33f7a9f3, 0xe99849a1, 0x9da26201, 
	0x95a383b8, 0x380e1ad7, 0x371c4e3a, 0x8502224a, 0x747e0220, 0x95590c98, 0xc32b4cf4, 0x4a3a0789, 
	0xe095ca71 },
};

// table for BCH(21,6) encode
const unsigned int BCNavBit::BCH_prn_table[64] = {
0x000000, 0x00a4cb, 0x014996, 0x01ed5d, 0x0237e7, 0x02932c, 0x037e71, 0x03daba, 0x046fce, 0x04cb05, 0x052658, 0x058293, 0x065829, 0x06fce2, 0x0711bf, 0x07b574, 
0x087b57, 0x08df9c, 0x0932c1, 0x09960a, 0x0a4cb0, 0x0ae87b, 0x0b0526, 0x0ba1ed, 0x0c1499, 0x0cb052, 0x0d5d0f, 0x0df9c4, 0x0e237e, 0x0e87b5, 0x0f6ae8, 0x0fce23, 
0x105265, 0x10f6ae, 0x111bf3, 0x11bf38, 0x126582, 0x12c149, 0x132c14, 0x1388df, 0x143dab, 0x149960, 0x15743d, 0x15d0f6, 0x160a4c, 0x16ae87, 0x1743da, 0x17e711, 
0x182932, 0x188df9, 0x1960a4, 0x19c46f, 0x1a1ed5, 0x1aba1e, 0x1b5743, 0x1bf388, 0x1c46fc, 0x1ce237, 0x1d0f6a, 0x1daba1, 0x1e711b, 0x1ed5d0, 0x1f388d, 0x1f9c46, 
};

// table for BCH(51,8) encode
const unsigned long long BCNavBit::BCH_soh_table[256] = {
0x0000000000000LL, 0x00f3a905b4be3LL, 0x0114fb0eddc25LL, 0x01e7520b697c6LL, 0x0229f61dbb84aLL, 0x02da5f180f3a9LL, 0x033d0d136646fLL, 0x03cea416d2f8cLL, 
0x0453ec3b77094LL, 0x04a0453ec3b77LL, 0x05471735aacb1LL, 0x05b4be301e752LL, 0x067a1a26cc8deLL, 0x0689b3237833dLL, 0x076ee128114fbLL, 0x079d482da5f18LL, 
0x085471735aacbLL, 0x08a7d876ee128LL, 0x09408a7d876eeLL, 0x09b3237833d0dLL, 0x0a7d876ee1281LL, 0x0a8e2e6b55962LL, 0x0b697c603cea4LL, 0x0b9ad56588547LL, 
0x0c079d482da5fLL, 0x0cf4344d991bcLL, 0x0d136646f067aLL, 0x0de0cf4344d99LL, 0x0e2e6b5596215LL, 0x0eddc250229f6LL, 0x0f3a905b4be30LL, 0x0fc9395eff5d3LL, 
0x105b4be301e75LL, 0x10a8e2e6b5596LL, 0x114fb0eddc250LL, 0x11bc19e8689b3LL, 0x1272bdfeba63fLL, 0x128114fb0eddcLL, 0x136646f067a1aLL, 0x1395eff5d31f9LL, 
0x1408a7d876ee1LL, 0x14fb0eddc2502LL, 0x151c5cd6ab2c4LL, 0x15eff5d31f927LL, 0x162151c5cd6abLL, 0x16d2f8c079d48LL, 0x1735aacb10a8eLL, 0x17c603cea416dLL, 
0x180f3a905b4beLL, 0x18fc9395eff5dLL, 0x191bc19e8689bLL, 0x19e8689b32378LL, 0x1a26cc8de0cf4LL, 0x1ad5658854717LL, 0x1b3237833d0d1LL, 0x1bc19e8689b32LL, 
0x1c5cd6ab2c42aLL, 0x1caf7fae98fc9LL, 0x1d482da5f180fLL, 0x1dbb84a0453ecLL, 0x1e7520b697c60LL, 0x1e8689b323783LL, 0x1f61dbb84a045LL, 0x1f9272bdfeba6LL, 
0x20453ec3b7709LL, 0x20b697c603ceaLL, 0x2151c5cd6ab2cLL, 0x21a26cc8de0cfLL, 0x226cc8de0cf43LL, 0x229f61dbb84a0LL, 0x237833d0d1366LL, 0x238b9ad565885LL, 
0x2416d2f8c079dLL, 0x24e57bfd74c7eLL, 0x250229f61dbb8LL, 0x25f180f3a905bLL, 0x263f24e57bfd7LL, 0x26cc8de0cf434LL, 0x272bdfeba63f2LL, 0x27d876ee12811LL, 
0x28114fb0eddc2LL, 0x28e2e6b559621LL, 0x2905b4be301e7LL, 0x29f61dbb84a04LL, 0x2a38b9ad56588LL, 0x2acb10a8e2e6bLL, 0x2b2c42a38b9adLL, 0x2bdfeba63f24eLL, 
0x2c42a38b9ad56LL, 0x2cb10a8e2e6b5LL, 0x2d56588547173LL, 0x2da5f180f3a90LL, 0x2e6b55962151cLL, 0x2e98fc9395effLL, 0x2f7fae98fc939LL, 0x2f8c079d482daLL, 
0x301e7520b697cLL, 0x30eddc250229fLL, 0x310a8e2e6b559LL, 0x31f9272bdfebaLL, 0x3237833d0d136LL, 0x32c42a38b9ad5LL, 0x33237833d0d13LL, 0x33d0d136646f0LL, 
0x344d991bc19e8LL, 0x34be301e7520bLL, 0x355962151c5cdLL, 0x35aacb10a8e2eLL, 0x36646f067a1a2LL, 0x3697c603cea41LL, 0x37709408a7d87LL, 0x37833d0d13664LL, 
0x384a0453ec3b7LL, 0x38b9ad5658854LL, 0x395eff5d31f92LL, 0x39ad565885471LL, 0x3a63f24e57bfdLL, 0x3a905b4be301eLL, 0x3b7709408a7d8LL, 0x3b84a0453ec3bLL, 
0x3c19e8689b323LL, 0x3cea416d2f8c0LL, 0x3d0d136646f06LL, 0x3dfeba63f24e5LL, 0x3e301e7520b69LL, 0x3ec3b7709408aLL, 0x3f24e57bfd74cLL, 0x3fd74c7e49cafLL, 
0x4079d482da5f1LL, 0x408a7d876ee12LL, 0x416d2f8c079d4LL, 0x419e8689b3237LL, 0x4250229f61dbbLL, 0x42a38b9ad5658LL, 0x4344d991bc19eLL, 0x43b7709408a7dLL, 
0x442a38b9ad565LL, 0x44d991bc19e86LL, 0x453ec3b770940LL, 0x45cd6ab2c42a3LL, 0x4603cea416d2fLL, 0x46f067a1a26ccLL, 0x471735aacb10aLL, 0x47e49caf7fae9LL, 
0x482da5f180f3aLL, 0x48de0cf4344d9LL, 0x49395eff5d31fLL, 0x49caf7fae98fcLL, 0x4a0453ec3b770LL, 0x4af7fae98fc93LL, 0x4b10a8e2e6b55LL, 0x4be301e7520b6LL, 
0x4c7e49caf7faeLL, 0x4c8de0cf4344dLL, 0x4d6ab2c42a38bLL, 0x4d991bc19e868LL, 0x4e57bfd74c7e4LL, 0x4ea416d2f8c07LL, 0x4f4344d991bc1LL, 0x4fb0eddc25022LL, 
0x50229f61dbb84LL, 0x50d136646f067LL, 0x5136646f067a1LL, 0x51c5cd6ab2c42LL, 0x520b697c603ceLL, 0x52f8c079d482dLL, 0x531f9272bdfebLL, 0x53ec3b7709408LL, 
0x5471735aacb10LL, 0x5482da5f180f3LL, 0x5565885471735LL, 0x55962151c5cd6LL, 0x565885471735aLL, 0x56ab2c42a38b9LL, 0x574c7e49caf7fLL, 0x57bfd74c7e49cLL, 
0x5876ee128114fLL, 0x5885471735aacLL, 0x5962151c5cd6aLL, 0x5991bc19e8689LL, 0x5a5f180f3a905LL, 0x5aacb10a8e2e6LL, 0x5b4be301e7520LL, 0x5bb84a0453ec3LL, 
0x5c250229f61dbLL, 0x5cd6ab2c42a38LL, 0x5d31f9272bdfeLL, 0x5dc250229f61dLL, 0x5e0cf4344d991LL, 0x5eff5d31f9272LL, 0x5f180f3a905b4LL, 0x5feba63f24e57LL, 
0x603cea416d2f8LL, 0x60cf4344d991bLL, 0x6128114fb0eddLL, 0x61dbb84a0453eLL, 0x62151c5cd6ab2LL, 0x62e6b55962151LL, 0x6301e7520b697LL, 0x63f24e57bfd74LL, 
0x646f067a1a26cLL, 0x649caf7fae98fLL, 0x657bfd74c7e49LL, 0x65885471735aaLL, 0x6646f067a1a26LL, 0x66b55962151c5LL, 0x67520b697c603LL, 0x67a1a26cc8de0LL, 
0x68689b3237833LL, 0x689b3237833d0LL, 0x697c603cea416LL, 0x698fc9395eff5LL, 0x6a416d2f8c079LL, 0x6ab2c42a38b9aLL, 0x6b55962151c5cLL, 0x6ba63f24e57bfLL, 
0x6c3b7709408a7LL, 0x6cc8de0cf4344LL, 0x6d2f8c079d482LL, 0x6ddc250229f61LL, 0x6e128114fb0edLL, 0x6ee128114fb0eLL, 0x6f067a1a26cc8LL, 0x6ff5d31f9272bLL, 
0x7067a1a26cc8dLL, 0x709408a7d876eLL, 0x71735aacb10a8LL, 0x7180f3a905b4bLL, 0x724e57bfd74c7LL, 0x72bdfeba63f24LL, 0x735aacb10a8e2LL, 0x73a905b4be301LL, 
0x74344d991bc19LL, 0x74c7e49caf7faLL, 0x7520b697c603cLL, 0x75d31f9272bdfLL, 0x761dbb84a0453LL, 0x76ee128114fb0LL, 0x7709408a7d876LL, 0x77fae98fc9395LL, 
0x7833d0d136646LL, 0x78c079d482da5LL, 0x79272bdfeba63LL, 0x79d482da5f180LL, 0x7a1a26cc8de0cLL, 0x7ae98fc9395efLL, 0x7b0eddc250229LL, 0x7bfd74c7e49caLL, 
0x7c603cea416d2LL, 0x7c9395eff5d31LL, 0x7d74c7e49caf7LL, 0x7d876ee128114LL, 0x7e49caf7fae98LL, 0x7eba63f24e57bLL, 0x7f5d31f9272bdLL, 0x7fae98fc9395eLL, 
};

const unsigned int BCNavBit::crc24q[256] = {
	0x00000000u, 0x01864CFBu, 0x028AD50Du, 0x030C99F6u, 0x0493E6E1u, 0x0515AA1Au, 0x061933ECu, 0x079F7F17u,
	0x08A18139u, 0x0927CDC2u, 0x0A2B5434u, 0x0BAD18CFu, 0x0C3267D8u, 0x0DB42B23u, 0x0EB8B2D5u, 0x0F3EFE2Eu,
	0x10C54E89u, 0x11430272u, 0x124F9B84u, 0x13C9D77Fu, 0x1456A868u, 0x15D0E493u, 0x16DC7D65u, 0x175A319Eu,
	0x1864CFB0u, 0x19E2834Bu, 0x1AEE1ABDu, 0x1B685646u, 0x1CF72951u, 0x1D7165AAu, 0x1E7DFC5Cu, 0x1FFBB0A7u,
	0x200CD1E9u, 0x218A9D12u, 0x228604E4u, 0x2300481Fu, 0x249F3708u, 0x25197BF3u, 0x2615E205u, 0x2793AEFEu,
	0x28AD50D0u, 0x292B1C2Bu, 0x2A2785DDu, 0x2BA1C926u, 0x2C3EB631u, 0x2DB8FACAu, 0x2EB4633Cu, 0x2F322FC7u,
	0x30C99F60u, 0x314FD39Bu, 0x32434A6Du, 0x33C50696u, 0x345A7981u, 0x35DC357Au, 0x36D0AC8Cu, 0x3756E077u,
	0x38681E59u, 0x39EE52A2u, 0x3AE2CB54u, 0x3B6487AFu, 0x3CFBF8B8u, 0x3D7DB443u, 0x3E712DB5u, 0x3FF7614Eu,
	0x4019A3D2u, 0x419FEF29u, 0x429376DFu, 0x43153A24u, 0x448A4533u, 0x450C09C8u, 0x4600903Eu, 0x4786DCC5u,
	0x48B822EBu, 0x493E6E10u, 0x4A32F7E6u, 0x4BB4BB1Du, 0x4C2BC40Au, 0x4DAD88F1u, 0x4EA11107u, 0x4F275DFCu,
	0x50DCED5Bu, 0x515AA1A0u, 0x52563856u, 0x53D074ADu, 0x544F0BBAu, 0x55C94741u, 0x56C5DEB7u, 0x5743924Cu,
	0x587D6C62u, 0x59FB2099u, 0x5AF7B96Fu, 0x5B71F594u, 0x5CEE8A83u, 0x5D68C678u, 0x5E645F8Eu, 0x5FE21375u,
	0x6015723Bu, 0x61933EC0u, 0x629FA736u, 0x6319EBCDu, 0x648694DAu, 0x6500D821u, 0x660C41D7u, 0x678A0D2Cu,
	0x68B4F302u, 0x6932BFF9u, 0x6A3E260Fu, 0x6BB86AF4u, 0x6C2715E3u, 0x6DA15918u, 0x6EADC0EEu, 0x6F2B8C15u,
	0x70D03CB2u, 0x71567049u, 0x725AE9BFu, 0x73DCA544u, 0x7443DA53u, 0x75C596A8u, 0x76C90F5Eu, 0x774F43A5u,
	0x7871BD8Bu, 0x79F7F170u, 0x7AFB6886u, 0x7B7D247Du, 0x7CE25B6Au, 0x7D641791u, 0x7E688E67u, 0x7FEEC29Cu,
	0x803347A4u, 0x81B50B5Fu, 0x82B992A9u, 0x833FDE52u, 0x84A0A145u, 0x8526EDBEu, 0x862A7448u, 0x87AC38B3u,
	0x8892C69Du, 0x89148A66u, 0x8A181390u, 0x8B9E5F6Bu, 0x8C01207Cu, 0x8D876C87u, 0x8E8BF571u, 0x8F0DB98Au,
	0x90F6092Du, 0x917045D6u, 0x927CDC20u, 0x93FA90DBu, 0x9465EFCCu, 0x95E3A337u, 0x96EF3AC1u, 0x9769763Au,
	0x98578814u, 0x99D1C4EFu, 0x9ADD5D19u, 0x9B5B11E2u, 0x9CC46EF5u, 0x9D42220Eu, 0x9E4EBBF8u, 0x9FC8F703u,
	0xA03F964Du, 0xA1B9DAB6u, 0xA2B54340u, 0xA3330FBBu, 0xA4AC70ACu, 0xA52A3C57u, 0xA626A5A1u, 0xA7A0E95Au,
	0xA89E1774u, 0xA9185B8Fu, 0xAA14C279u, 0xAB928E82u, 0xAC0DF195u, 0xAD8BBD6Eu, 0xAE872498u, 0xAF016863u,
	0xB0FAD8C4u, 0xB17C943Fu, 0xB2700DC9u, 0xB3F64132u, 0xB4693E25u, 0xB5EF72DEu, 0xB6E3EB28u, 0xB765A7D3u,
	0xB85B59FDu, 0xB9DD1506u, 0xBAD18CF0u, 0xBB57C00Bu, 0xBCC8BF1Cu, 0xBD4EF3E7u, 0xBE426A11u, 0xBFC426EAu,
	0xC02AE476u, 0xC1ACA88Du, 0xC2A0317Bu, 0xC3267D80u, 0xC4B90297u, 0xC53F4E6Cu, 0xC633D79Au, 0xC7B59B61u,
	0xC88B654Fu, 0xC90D29B4u, 0xCA01B042u, 0xCB87FCB9u, 0xCC1883AEu, 0xCD9ECF55u, 0xCE9256A3u, 0xCF141A58u,
	0xD0EFAAFFu, 0xD169E604u, 0xD2657FF2u, 0xD3E33309u, 0xD47C4C1Eu, 0xD5FA00E5u, 0xD6F69913u, 0xD770D5E8u,
	0xD84E2BC6u, 0xD9C8673Du, 0xDAC4FECBu, 0xDB42B230u, 0xDCDDCD27u, 0xDD5B81DCu, 0xDE57182Au, 0xDFD154D1u,
	0xE026359Fu, 0xE1A07964u, 0xE2ACE092u, 0xE32AAC69u, 0xE4B5D37Eu, 0xE5339F85u, 0xE63F0673u, 0xE7B94A88u,
	0xE887B4A6u, 0xE901F85Du, 0xEA0D61ABu, 0xEB8B2D50u, 0xEC145247u, 0xED921EBCu, 0xEE9E874Au, 0xEF18CBB1u,
	0xF0E37B16u, 0xF16537EDu, 0xF269AE1Bu, 0xF3EFE2E0u, 0xF4709DF7u, 0xF5F6D10Cu, 0xF6FA48FAu, 0xF77C0401u,
	0xF842FA2Fu, 0xF9C4B6D4u, 0xFAC82F22u, 0xFB4E63D9u, 0xFCD11CCEu, 0xFD575035u, 0xFE5BC9C3u, 0xFFDD8538u,
};

const char BCNavBit::B1CMatrixGen2[B1C_SUBFRAME2_SYMBOL_LENGTH*B1C_SUBFRAME2_SYMBOL_LENGTH+1] = {
"8hH6iX^5g41GGbCK<`Y?PK@dP_8=28CH0000i@VO5Oa8Tj?Sc9W]1c<m@93VfGLAAeZV=Qb^0SMk0000k6c\\LIoDbF7@3BFgF::k"
"QP=bFSU[NMmcRe^iWJm`5DO7]FjA_j^P0000FKO7[9njS?Hd3<Y_S3WSSMIOXd@11alDAKjU0dRQ0000ib7:@HTQe94gIH9N9EEi"
"Vg82Gh33\\mDPPG`X;@D9cUS7QGVjXi`Y0000_Ol]3d5Vh4>e]7MoDO4hhb:SBPj?iCKUjOi3?Pg;0000X2][S>iV_d_a1>dnd>6X"
"h^;:8M?K3<7VVH:>T27]UgcKS8hS>he;0000Ec9NKQAhiD]TOoZ67OmMMo9FIVGddSdgSPH?04^W0000W:O1Y<H_EQEc9fQ3Qff>"
"ONQ?cPI4B;Z]]F3Ga1Z<oLn_ocOKGO3Q0000dnmb47[OAM<aleVTZlYJPem1H]?DD5g6KEFI02NS0000Sil>?;=@C7Cnm87B788G"
"]mf\\>Iej`9ckk:b[K_d=8PWV;>BXUBbm0000>hWYjYLB2H=MiQDS4iK7TQFW3koGGESPXhBe0MC[0000[\\V@o1RZ:8OTF18`8gg["
"GJ_KL8YgSB[ejDWEfM[3@P=1FLGCETWi0000Lcn?gAJT8`2ja1X98cf88B\\=6jm^TZ5PCcTg0jVH0000EK?R=2TGDAn;\\2ASA]]E"
"iYD]THJJVfn==_Zo4Wn5QSa3jTijoiZ80000lF1dJc^iHI64A3kKnF>HH7OG:=ea?j?SjF_J0=YX0000X]AUGf_<lclMg6c\\c6do"
"0000k0A0f0700000000000000a070X0YjTLQ000000000000000000000000c0:000000N0Y0000040C0X0E0000X0o0:0;00000"
"00000=0_0W0F000000000000>020F0\\06IFZ0000000000000000000000000_0?0000F0>00000h0N0]0`000000k0;0V0[0000"
"0000k0]0m0700000000000000a0b0X0gQGLQ000000000000000000000000d0:000000N0g0000040F0;0E0000;0o0B0;00000"
"00000a0S0?0J000000000000a0D060d0lC680000000000000000000000000S0U000060_000001090n0]000000^0=0[020000"
"PUeEjVnnRW4OOja8`^4l6N3DdjPd8=aS0000L]<onK1PVZX`9Dhb4];VVT2QkOc37@7Nd]=n0OUY0000YE9fQX=CLKLJ[XKIKXo8"
"\\1gQSJ7bDCTRRVk;j]TEfHKkfS\\N;\\cg0000UK_>b69\\PeEj28aXT2@cJ8_]ZRQooOo[NBV70I1^0000^M2<QCV=i6iK_W6D6WW;"
"]mf\\>Iej`9ckk:bPK_d=8PWV;>BXUBbf0000>hWYjYLB2H=MiQDS4iK7TQFW3koGGESWXhBe0MC[0000[\\V@o1R]:8OTF18`8gg["
"GJ_KL8YgSB[eVDWEfM[3@P=1FLGC9TWi0000Lcn?gAJT8`2ja1X98cf88B\\=6jm^^Z5PCcTg0jVH0000EK?Rm2TGDAn;\\2ASA]]E"
"VgT2Gh33\\mDPPG`X;@D9cU?7QGVjXi`Y0000_Ol]3d5Vh4>e]7MoDOWhhb:SBPj?iCKUjOi3?Pg;0000;2][S>iV_d_a1>dnd>6X"
"Bmfo6Iej`5ckk:VUKPc=;WTVX6BXUB7f0000OTFYj8LB2?=KiQnSci17IQF_JkoGGXGWXH:e03m[0000[\\i@>5:]O8OTFg8`8ggU"
"i5^ZgaKo7=b\\\\hQkGO32NkdB[YJUWJQ^0000gd1fof]JVR2n:Xc>?:GjdXE1e\\S66PF1UIhK0nA@0000@ZBlSLMihNHdECN7Nmm@"
"Qn=bFSU[NMmcRe^iWJm`5:O7]FjA_j^P0000FKO7[9njS?Hd3<Y_SKWSSMIOXd@11alDAKjU0dRQ0000ib7B@HTQe94gIH9N9EEi"
"d:O5AQfm>hWKKcT=^eW4Ee[TEAd9=dgO0000`[Z_mlId?;4^DCSLWDVgQCZn8K5<<3<297cf0o:P0000PGDk]hca`l`[Zil>lii="
"i5^ZgaKo7=b\\\\hQkGO32Nk1B[gJUWJQ^0000gd1fof]JVR2n:Xc>?:GjdXE1e\\S66P>1UIhK0n9@0000@ZBlSLMihNHdECN7Nmm@"
"32^Zg?Ko7=8\\9hQ@GO8VNl1X[g3UWJQ50000gI1Bof2J?RCn:XcW?IG??=E1enS66P>lUIJK0n9A0000@ZB_SCM3hfHdECf7fmm@"
"2>?=K:ZZkgaEEKnQN[aC8X4`bK2bQ]n60000A_@LZTm2:JS3L`Rja_U::cioVE74e1eX7_]Z0E>N0000N=L;oS]2ATAIWSTMTSGQ"
"00000m0[0C0W000000000000K050W0=0?DW20000000000000000000000000H0h0000P0K00000_0c0^0k00000090b0L0Q0000"
"000090^060n00000000000000H0n070G`4m`000000000000000000000000a0]000000d0G00000:0W0b010000b030]0b00000"
"00000i0`0V03000000000000i0:030J0NX3Y0000000000000000000000000`0[000030i00000Q0U0O0g000000G0W0d010000"
"0000L0U080B00000000000000P0B0e0c3M;3000000000000000000000000n0l00000070d00000H0Y0e0m0000e040l0j00000"
"0000020O010E000000000000g0m0E0Z04aE30000000000000000000000000O0T0000E0g00000I0;0f07000000\\0[0B0b0000"
"0000F0m0S0M00000000000000:0M0c0oDJgD00000000000000000000000040L000000T0o00000V0[0c0@0000d0`0L0d00000"
"00000S0A0U0Q000000000000Z0>0l010BhQC0000000000000000000000000A0]0000l0Z00000:0I060F000000P0a0g0D0000"
"000040P0l0600000000000000e060m0@YXHY000000000000000000000000S0n00000010@00000b0i0m0:0000m0f0n0m00000"
"iYD]THJ3Vfn==_Zo4Wn5QSa3jTijoiZ80000lF1d3c^iHI64A3kKnA>HH7O@:=ea?j?SjF_J0=YX0000X]AUGf_<lclMg6c\\c6do"
"ONQ?dPI4B;Z]]F3Ga1Z<oLn_ocOKGO3Q0000dnmb4b[OAM<aleVTZlaJnem1H]?DD5g6KEFI02NS0000Sil>?;=@C7Cnm87B788G"
"=1gMU37bDFTRRVd^j]GE6H[kfU\\N;\\d10000UB[>b>E\\P:EI28?X32j3KF_[`RQooOXHNB\\70Il^0000^Mk<Q@hnV6iK_@6D6WW^"
"32^Zg?oo7=8\\nhQ@GO8kNl1X[g3U@JQ50000gIHBof23?RCn:XcW8IG??=41enS6JP>lUIJo0n9A0000@ZB_1CJ3hfHdECf7fmm@"
"6B:S2NmCWJ@oodlj5D@eHj<GH]6EP6l:00002<`iCi46KbeXTF[=@T51<F`kYo9LL7nkE8dm0XIR0000RSTM9JQ?c_c<`\\_W_VVP"
"VY82GhJ3\\mn=g_`X4@D5c9S]QGijoi`Y0000GOSd3d5ihF>PA7MohA4hhm1SB=e??CK9jOiJ0PgV0000X2]Ue>EV_cla1>d\\c66X"
"`FmnWeQQcE6MaW8<oi6RYA@N^W`;<Z8C0000WJ:\\QgP`eolX\\NT[6Joeef3@7aXSZHUA;JZQSaFL0000<n\\]@lZ`Bg:GOlgdg11<"
"9oKC3]kMEShll5Cc\\NhWTbBMD39Dc9RK0000^<;eM4>91VW\\maO`hmQ]]a;f=lnBZDZbD<5k0Pod0000dCm87S5g^4^:;j4H4jec"
":fNidR4eB^`22OiS?1`LX>Deod:oS:3N0000FEC8eb<:RaY?_j\\G`_gRRjClh2KDToT>oEO402fU0000Ui_W6^OAFbFnmYbZbY8S"
"aA@4^`d6K_oJJMSB8Po:1BQI1;agmaS@0000^Q2[6[Oahb:8R>jfoR8GQ>25DJYNNV=5gnMd03AC0000C4R9Y_ZHkUkQ2<UKU<<m"
"HXoObkMah[J_;946nm3@eA8FGbETdE4X0000b=8jaj@ElL@iC?BdkCnkk[^8R_D``<cAT=EM0i;600006OFYDN]H9e5Z^NeheQQ6"
"5KamJA229GHg1JP`iQH>R73knJ5\\`^P?0000J[Xf2I65AUe1fkFZH[iAAM<3L1V:^SB7\\[^201Kc0000`mfb3e^5;IXOoeI9I44`"
"0000000000000000000000000000000000000000k`?L0000?95e000000000000000000000000Q3480000000000000000QNoW"
"0000000000000000000000000000000000000000N<C<0000C5`l000000000000000000000000iJ120000000000000000iQOI"
"0000000000000000000000000000000000000000VA9A00009L<F000000000000000000000000:4aV0000000000000000:XGa"
"0000000000000000000000000000000000000000k`FL0000F95e000000000000000000000000V3480000000000000000VNoW"
"Cjel`LPROo:@@mh[kYFU?[V1?ZCaDChe0000`Vc3R3SCW^UAgIin:gkHVINc9@M\\\\;8ca5mP0AGT0000TlgdMo<>mJfVNbJOJ77T"
"VY82GhJ3\\mn=g_`X4@DLc9S]QGijoi`Y0000GOS]3d5ihF>PA7MohA4hhm1SB=e??CK9jOiJ0PgV0000X2]Ue>EV_dla1>d\\d66X"
">Z:S2fCCW3AoX2lRIDAj_MkFH2>ER6lB0000d8cGCie>f5\\9GF[PA85ffOYkgX9L67=ME86CLXZI0000RSGak\\6>did<`\\i@i\\VR"
"_8bADEhJiN\\LLlAKI5\\^jGMJeD_eK_Bb00001MgcJ`;_<R^I@32?\\@6EE3gWOL4MaeaGeClh0:8o0000oA@STNl[1`1Mgd`V`ddK"
"YK?C3A2kESH11^RWVN9>DW:mDJ5n`5R?00003:74k465g[>lfMOZ]fVP:MX7=1\\BBUQ7n<^20ldc0000cCfb\\G@Y^I;:XjIEIeec"
"RlSHQ\\nDI@eO[=?Y`5eFK_NE6QPd8P?U0000Q2NEDolP\\];:9TJ8\\2`\\\\@<NM:c77Ab_d2Pn0:[R0000YHEfc;iR=oL3<;oIoXXY"
"AdM<aF::]8k55aVejSkf\\K?B3aAJe@Vc0000W1>[:nNAFHTh[B=4k1GFFZl?_5JR@YIKJ1@:R5dj0000e<[o?T@AWnWP6Tn2nTDe"
"jP=@CGU[Nkfcce7_WDfn]Og[ACjA_j;=00004gI9[5\\j`>nW3<8lf3H;G<IJoc@11A1OA?eU0XPi0000i73:FkeZ454gIE5N5EE_"
"NIR]:U<LmaC66Q9VA7CTkGl8kON2VN9R0000:leHLEDNd@TAb=giCbJ5l=e7;6]__K3B2XQ<0>I\\0000\\YbZ]aScjEjlehEmEhhV"
"nHEd_X;^YIgTT7m2[Z1aC?ic=_bL]bmH0000_jiF^FMbDeaG`5>AX`[fWIJiNT<@@4A?Ljb;0Gh200002dcV<:K87C3WJ:CYCOO2"
"V582Gh33\\mD=P_`X4@D9cUS7QGVjXi`Y0000GOl]3d5ihF>PA7MohO4hhm:SBPe?iCKUjOi30Pg;0000X2][S>iV_dla1>d\\d66X"
"<TR^IliVLdPmm[23:oPY`eHVZI<Z3<2D0000UWSaiM8<lO?:;V9JPWKll\\@XAmBHhZheZW[i0mT700007^;j4d[NUMUEG?M=M?a3"
"0000f0j0D0]00000000000000C0]0B0MiEbV000000000000000000000000P0U000000\\0M00000l0T0B060000B0:0U0Z00000"
"00000S080U0Q000000000000Z0>0Q010B<QC0000000000000000000000000A0]0000Q0Z00000^0I060F000000W0a0g0D0000"
"0000W060e0H00000000000000A0H0M03RVGR000000000000000000000000:0m000000I0300000L0Q0a0X0000a0k0m0a00000"
"0000060l0>0C00000000000060Y0C0m0hRC50000000000000000000000000l0a0000C0J00000H0M080Z00000020n0i0`0000"
"1oJW\\59EljiU7YOa=diX:DnHI\\1RagO30000\\f8>EBog5N`[6HAM5f=55jbnC[P22QkDRfgE0[7?0000aW>Tn`g1YB8]b`BlBZZa"
"XM9QE>@@;n588E<:l45cVhCAiEXi:X<k0000KG?P@=`X>1RljAfO5GI>>]SHU8_CFDFhiGo@08MB0000BQjJHno7K=KmaR=^=RP:"
"173R\\5EH_ji[[gWaP6iX4;2W4\\1Ia1:30000n28ZHBo1U=XP>hAMi>cO5h86C[RkkNkDImgE0<7?0000?@>TRj^SYBY28`B_B``a"
"mSGEji\\nRWIFFLalZ^41?lQ9dj=cb=aS0000j]QKnKg=CA1O5Dh7V5ZMJD[QkF`33@7Qc]=\\0OU800008E9N`X_PL?<J[X?R?oo8"
"CjB1ZLPPFo:@@ZHDT8:U?cVRaZCaDmHe0000f^N3PJSCL27kgR_n:^bLLI5`9@MV\\X\\cM^mP0@jT0000T1gd`7m>fJfiQ7JOJ73D"
"173R\\5EH_ji[[gWaP;iX4;2W4\\1Ia1O30000n28ZHBo1U=XP>hAMi>cO5h86C[RkkNkDIfgE0<7?0000?@>TRjgSYBY28`B_B``a"
"6e41Z<=PFoOWWfHU28CShU`gaZmMnmH40000Z^`JPJGm>;S@YR_\\LY2EiRQ`9WkVVX\\`M^f=0@jD0000D1gck7[6fhNiQ7hFh33D"
"V582GhJ3\\mD=g_`X4@DLcUS7QGVjoi`Y0000GOl]3d5ihF>PA7MohO4hhm1SBPe??CKUjOiJ0Pg;0000X2][e>iV_dla1>d\\d66X"
">Z]S2fCCW3AXX2lRIDAjhMLFH2>ER6lB0000d8cGCie>f5\\9GF[PA8nffOYkgXEL67=ME86C0XZI0000ISGak\\6>did<`\\i@i\\VR"
"me4kB<=PFKOWWfgn2UOSaUigMBmMnmE40000NiQJPhGm>]S2YRl\\OY7E<RQ85WkVVMV`M;f=0@eD0000D1YcZKf6NhNiQ3hFh33n"
"YK?C3A2kESH11^RWVN9>IW7mDJ5n`5R?00003:74k465g[>lfMOZ]fVP:MX7=1\\BBUQ7n<^20loc0000cCmb\\G@Y^I;:XjIEIeec"
"V582GhJ3\\mD=g_`X4@DLcUS7QGijoi`Y0000GOS]3d5ihF>PA7MohO4hhm1SBPe??CK9jOiJ0Pg;0000X2][e>EV_dla1>d\\d66X"
"00000e0D0j0`00000000000020K0U0S0]_`>0000000000000000000000000;0^0000U0200000A0O0?0W000000o0H0G0R0000"
"0000o0?0B0l00000000000000;0l0H0VFLeF000000000000000000000000A06000000:0V00000m0`0H070000H09060H00000"
"0000030N070X00000000000030e0X0C0LAX90000000000000000000000000N0i0000X0300000<0a040E00000010O0m0H0000"
"0000G0n0h0m00000000000000U0m0=0:9@a9000000000000000000000000l0b000000E0:00000;030=0e0000=0L0b0P00000"
"00000S080`0Q000000000000Z030Q010B<QC000000000000000000000000080]0000Q0Z00000^0I060F000000W0a0g0O0000"
"0000W060e0E00000000000000A0E0M03RVGR000000000000000000000000:0f000000I0300000L0Q0a0X0000a0k0f0a00000"
"00000A0\\0]0500000000000080_0B0:0bjBh0000000000000000000000000\\0n0000B080000070o0l06000000?0S0O0>0000"
"0000L0U0b0B00000000000000=0B0e0cJM;3000000000000000000000000\\0l00000070c00000H0Y0e0m0000e040l0e00000"
"R[UhN\\DT4@e::PKic9e_>i7H>QR6YRKU0000N7fXTXlRO2_BEG38eEc?7GLfM:dbb]5f6kPD0B1g0000ghEmd@VFPo=7L^o4o;;Y"
"LTD54_iV=6PmG[k7:XRYMge^`4<Z3<kT00004@e^VaY<_WKC;\\E3_;:__6Se]mBhh>JgZ@<i0CGL000075^jBK1L[aUHSKa=M??7"
"FQel`=RROXB@A`hTkYB[JdcI?`FaTChj0000m5f1R3UF=kbM1IiDB5k==49cEAM\\C;nda5CR\\AQG0000Tl16cbCFm3mVNb3:377T"
"ok2j96W@X\\^bbKjO1I^`iHm@_9o_Oo[20000?ma=@LZo7g`1eANF^eR66Aa4SblmC_CH_TKW0Uk:0000:jehE\\K3?L?maPL;LP=O"
"f4IY:[L=m?F>>NY\\]7FGMZ_=k:fk\\f9I0000QXjh=HTf[AG]8P1VF83[[Pjb^>2_ikiZkXNL054n0000nY8`B?NdQHQleJHCHJh\\"
"Cjel`LPROo:@@mh[kY:U?[V1?ZCaDChe0000`VN3R3SCW2UAgIin:gkHVINc9@M\\\\;8ca5mP0AGT0000TlgdMo<>fJfVN7JOJ77D"
";MkNHW@A^D58aoLBle9c=dhQVHXi:XLM0000HShPAPcXWGcYj]m:WjlWWD?h[8_FFTOdiSX@0Ya;0000BNQJ_I6;o=KC?I=^=RRB"
"kW6PoB``M1?EHoDN3<?FT;Xc8okbN2D>0000oiA=`GCkB3UH=cIQ?i3BBdVX\\H7e2lj;bi2`eHWf0000NP=^XU2k]GA4@UGMGSSN"
"00000000000000000000000000000000000000009kWf0000hgYB000000000000000000000000`V:D0000000000000000Lc3o"
"0000000000000000000000000000000000000000TYUM0000U>R;00000000000000000000000052XC000000000000000059<i"
"0000000000000000000000000000000000000000ITjT0000jK?b000000000000000000000000Y5<>0000000000000000YRN<"
"0000000000000000000000000000000000000000L;g;0000gfNh000000000000000000000000A:H`0000000000000000A74H"
"<TDB4liV=dPmm[kg:XPY`gH^`I<Z3<kD00004HSaVa8<fOY:;\\9JP;:2H\\SeAmBhh>oeZ@[i0CT7000075;jBd1NUMUHS?M=M??3"
"S73@n9EH_Qi[bg:?P6VXB;DW4n1Ia1:70000nmDZHZX1UfX<>h]M9>P99Q8DF[RkkNM;Im1E0<b?0000?@WTRc^lgBY28cB_B``?"
"RlSHQ\\DDI@eO:Q?Y`5e_KfNT6QRdYP?U0000Q2LEDolR\\];:9TJ8e2`\\\\GkNM:c7PAbfd2PD0:[g0000YHEmN;PR=oL3<;oIoXXY"
"YJ_6i;59g4lSS86kL`lKR\\A9PiYPkYCh0000bQ7:9O?Y;<BLd9W2ldZ;;E7cfS=A]P]\\PQ850SJM0000M6dnV48TbOb@3BO1OB:k"
};
const char BCNavBit::B1CMatrixGen3[B1C_SUBFRAME3_SYMBOL_LENGTH*B1C_SUBFRAME3_SYMBOL_LENGTH+1] = {
"l600RI00QP8600003[000000006i_a3900EJ00oR0000"
"jV00W^00kX:h0000La00000000h6dlLj00Sm00V;0000"
"00W>PaHB0000mg@Go<3Q;f00agIgQJXoiL0000dBj;WO"
"005jl7^^0000AoNN`FTD1G007o`o>2g`5O0000X=n1Qk"
"dR00g100hYk\\0000A300000000\\XoLAd00N@00:g0000"
"6n005l00J^Zn0000O700000000nW>=O600fF00I10000"
"00G8]d=C0000=NgcTioKAX00\\NkN[R@TF@0000fH?AYI"
"00OjD6?F0000PE11@VX<]=006fGf<oA@O\\0000mj[]O4"
"00NUH4:\\0000:W<oQ5`8Eg004WJW8ZNQ290000@\\bf[i"
"002dHX]]0000:i<<QRY8EO00XWQWCZ9Q2I0000@dbE[`"
"P^00`?00WMf^0000GA00000000^I:bGP00\\e00ga0000"
"oB00[<00RUhB00009D00000000IY8A9o00X500k[0000"
"X0000000000Z0Z90007010e00j000000000ej100m000"
"0Q00000000P0200N000X0E0Qj00000000030]^000W00"
"00000000>_000000000000]B00000000HD00000000?X"
"00000000hF000000000000bh00000000S`00000000lS"
"001JkDRJ00005m66SAeX[^00DmabX4US1]00008Jo[1H"
"00Vh6:jj0000SI3OiYk2dM00:IWID[ciQc00004;]dJ<"
"40000000000?0?N000G0L0H006000000000H6d00b000"
"0n00000000U0>00D000M0X0nP00000000020f?000j00"
"0@00000000M0\\00A000l0n0@X000000000S0JL000E00"
"X0000000000U0U90007010e00l000000000el100m000"
"00=T3QLL0000i]^^bH61F_00QUbU1dCb=h0000[TgF;n"
"0015Zmn?0000nLEfgO@WBA00bLcLiT1gI:0000=?>B9M"
"00TbAVLE0000XQY`D>R?@o00VQ2Q?PTDCW00003EaG85"
"00>:;M660000f`TTR[JhXN00M`R`jCoR><0000c1HXDF"
"M0000000000C0CV000E070=00P0000000006P700e000"
"0R00000000U0>00D000M0X0RP000000000206?000`00"
"?P00YU00iG2P0000@\\00000000PoKm@?00d;00OS0000"
":[003700gJW10000d9000000001MkGd:00Bc00f30000"
"aF008S00_T9=0000;V00000000=73fWa00cX00AG0000"
"Bl00Ko005?Cl0000NE00000000l`ZSNI004Q00<70000"
"00000000jJ000000000000Zj00000000AY00000000>A"
"00000000FJ000000000000ZF00000000?Y00000000>?"
"00`ZUA;m0000e3VVkT9Ra400A3<3R5Mk`G0000:mPa`N"
"00R^BfPP0000\\<9NYJW>:@00f<Y<_DOYRO0000La6:5T"
"00@ZR?WW0000C1SSXL7N^m00?d4dN3;4@=00006ZQ^@:"
"00HkQP8>00008\\a=EX:OjB00^\\f\\3gHEGe0000n>FjM1"
"T0000000000H0d[000I0N0M00a000000000MfN00X000"
"0D00000000l0W00T000c0@0Dn000000000k0mK000Q00"
"00Si9RGG0000Y6??H;B:Q800RnHn71jHS^0000Di3Qal"
"007KCel]0000lGX43NV`md00HGOG`i73<f0000S]Zmo@"
"H0000000000R0R7000a0;0n00D000000000CDn00U000"
"0800000000_0F00Y000d0A0TD000000000`0=>000N00"
};

const unsigned int BCNavBit::e2v_table[128] = {
 1,  2,  4,  8, 16, 32,  3,  6, 12, 24, 48, 35,  5, 10, 20, 40,
19, 38, 15, 30, 60, 59, 53, 41, 17, 34,  7, 14, 28, 56, 51, 37, 
 9, 18, 36, 11, 22, 44, 27, 54, 47, 29, 58, 55, 45, 25, 50, 39, 
13, 26, 52, 43, 21, 42, 23, 46, 31, 62, 63, 61, 57, 49, 33, 
 1,  2,  4,  8, 16, 32,  3,  6, 12, 24, 48, 35,  5, 10, 20, 40,
19, 38, 15, 30, 60, 59, 53, 41, 17, 34,  7, 14, 28, 56, 51, 37, 
 9, 18, 36, 11, 22, 44, 27, 54, 47, 29, 58, 55, 45, 25, 50, 39, 
13, 26, 52, 43, 21, 42, 23, 46, 31, 62, 63, 61, 57, 49, 33, 
};

const unsigned int BCNavBit::v2e_table[64] = {
 0,  0,  1,  6,  2, 12,  7, 26,  3, 32, 13, 35,  8, 48, 27, 18, 
 4, 24, 33, 16, 14, 52, 36, 54,  9, 45, 49, 38, 28, 41, 19, 56, 
 5, 62, 25, 11, 34, 31, 17, 47, 15, 23, 53, 51, 37, 44, 55, 40, 
10, 61, 46, 30, 50, 22, 39, 43, 29, 60, 42, 21, 20, 59, 57, 58, 
};

BCNavBit::BCNavBit()
{
}

BCNavBit::~BCNavBit()
{
}

int BCNavBit::GetFrameData(GNSS_TIME StartTime, int svid, int channel, int *NavBits)
{
	int i, j, page, soh, how;
	unsigned int mask;
	const unsigned int *code;
	int Symbol2[200], Symbol3[88];
	int bits2[1200], bits3[528];
	unsigned int *data, value;
	int *p1, *p2, *p3;

	if (svid < 1 || svid > 63)
		return 0;
	code = B1CSecondCode[svid-1];
	if (channel == 0)	// pilot channel
	{
		for (i = 0; i < 1800; i ++)
		{
			mask = 1 << (i &0x1f);
			NavBits[i] = (code[i >> 5] & mask) ? 1 : 0;
		}
		return 0;
	}
	
	// data channel
	if (svid < 1 || svid > 63)
		return 1;
	page = StartTime.MilliSeconds / 18000;		// frames from week epoch
	how = page / 200;
	soh = page % 200;
	// assume subframe 3 broadcast page 1 to 4 cyclically
	page %= 4;

	data = BdsSubframe2[svid-1];
	// insert WN and HOW for Subframe2
	data[0] &= 0x7;
	data[0] |= COMPOSE_BITS(StartTime.Week - 1356, 11, 13);
	data[0] |= COMPOSE_BITS(how, 3, 8);
	// generate CRC for subframe2
	AppendCRC(data, 25);
	// assign each 6bit into Symbol2 array
	for (i = 0; i < 25; i ++)
	{
		Symbol2[i*4+0] = (data[i] >> 18) & 0x3f;
		Symbol2[i*4+1] = (data[i] >> 12) & 0x3f;
		Symbol2[i*4+2] = (data[i] >> 6) & 0x3f;
		Symbol2[i*4+3] = data[i] & 0x3f;
	}
	B1CLDPCEncode(Symbol2, 2);		// do LDPC encode
	for (i = 0; i < 200; i ++)
		AssignBits(Symbol2[i], 6, bits2+i*6);

	// generate CRC for subframe2
	data = BdsSubframe3[page];
	AppendCRC(data, 11);
	// assign each 6bit into Symbol3 array
	for (i = 0; i < 11; i ++)
	{
		Symbol3[i*4+0] = (data[i] >> 18) & 0x3f;
		Symbol3[i*4+1] = (data[i] >> 12) & 0x3f;
		Symbol3[i*4+2] = (data[i] >> 6) & 0x3f;
		Symbol3[i*4+3] = data[i] & 0x3f;
	}
	B1CLDPCEncode(Symbol3, 3);		// do LDPC encode
	for (i = 0; i < 88; i ++)
		AssignBits(Symbol3[i], 6, bits3+i*6);

	// do interleaving
	for (i = 0; i < 11; i ++)	// 11 round of subframe2, subframe2, subframe3
	{
		p1 = NavBits + 72 + i * 3;
		p2 = NavBits + 73 + i * 3;
		p3 = NavBits + 74 + i * 3;
		for (j = 0; j < 48; j ++)
		{
			*p1 = bits2[i*96+j]; p1 += 36;
			*p2 = bits2[i*96+48+j]; p2 += 36;
			*p3 = bits3[i*48+j]; p3 += 36;
		}
	}
	// last three rows of subframe2
	p1 = NavBits + 105;
	p2 = NavBits + 106;
	p3 = NavBits + 107;
	for (j = 0; j < 48; j ++)
	{
		*p1 = bits2[22*48+j]; p1 += 36;
		*p2 = bits2[23*48+j]; p2 += 36;
		*p3 = bits3[24*48+j]; p3 += 36;
	}

	// add subframe 1
	AssignBits(BCH_prn_table[svid], 21, NavBits);
	value = (unsigned int)(BCH_soh_table[soh] >> 32);
	AssignBits(value, 19, NavBits + 21);
	value = (unsigned int)(BCH_soh_table[soh]);
	AssignBits(value, 32, NavBits + 40);
	return 0;
}

int BCNavBit::SetEphemeris(int svid, PGPS_EPHEMERIS Eph)
{
	if (svid < 1 || svid > 63 || !Eph || !Eph->flag)
		return 0;
	ComposeSubframe2(Eph, BdsSubframe2[svid-1]);
	return svid;
}

void BCNavBit::ComposeSubframe2(PGPS_EPHEMERIS Eph, unsigned int Subframe2[25])
{
	double Value;
	signed int IntValue;
	unsigned int UintValue;

	// IODC and IODE in WORD0 ~ WORD1(15MSB)
	Subframe2[0] = COMPOSE_BITS(Eph->iodc >> 7, 0, 3);
	Subframe2[1] = COMPOSE_BITS(Eph->iodc, 17, 7);
	Subframe2[1] |= COMPOSE_BITS(Eph->iode2, 9, 8);

	// ephemeris1 203bits in WORD1 ~ WORD10(2MSB)
	UintValue = Eph->toe / 300;	// toe
	Subframe2[1] |= COMPOSE_BITS(UintValue >> 2, 0, 9);
	Subframe2[2] = COMPOSE_BITS(UintValue, 22, 2);
	UintValue = (Eph->axis > 4e7) ? ((Eph->svid <= 5) ? 1 : 2) : 3;	// SatType
	Subframe2[2] |= COMPOSE_BITS(UintValue, 20, 2);
	Value = Eph->axis - ((UintValue == 3) ? 27906100.0 : 42162200.0);	// deltaA
	Value = UnscaleDouble(Value, -9);
	IntValue = roundi(Value);
	Subframe2[2] |= COMPOSE_BITS(IntValue >> 6, 0, 20);
	Subframe2[3] = COMPOSE_BITS(IntValue, 18, 6);
	Value = 0;//UnscaleDouble(Eph->axis_dot, -21);	// Adot
	IntValue = roundi(Value);
	Subframe2[3] |= COMPOSE_BITS(IntValue >> 7, 0, 18);
	Subframe2[4] = COMPOSE_BITS(IntValue, 17, 7);
	Value = UnscaleDouble(Eph->delta_n / PI, -44);	// delta_n
	IntValue = roundi(Value);
	Subframe2[4] |= COMPOSE_BITS(IntValue, 0, 17);
	Value = 0;//UnscaleDouble(Eph->???, -57);	// delta n dot
	IntValue = roundi(Value);
	Subframe2[5] = COMPOSE_BITS(IntValue, 1, 23);
	IntValue = (Eph->M0 < 0) ? 1 : 0;	// M0
	Value = IntValue ? (Eph->M0 / PI + 1) : (Eph->M0 / PI);
	Value = UnscaleDouble(Value, -32);
	UintValue = roundu(Value);
	Subframe2[5] |= COMPOSE_BITS(IntValue, 0, 1);
	Subframe2[6] = COMPOSE_BITS(UintValue >> 8, 0, 24);
	Subframe2[7] = COMPOSE_BITS(UintValue, 16, 8);
	IntValue = (Eph->ecc >= 0.25) ? 1 : 0;	// ecc
	Value = IntValue ? (Eph->ecc - 0.25) : (Eph->ecc);
	Value = UnscaleDouble(Value, -34);
	UintValue = roundu(Value);
	Subframe2[7] |= COMPOSE_BITS(IntValue, 15, 1);
	Subframe2[7] |= COMPOSE_BITS(UintValue >> 17, 0, 15);
	Subframe2[8] = COMPOSE_BITS(UintValue, 7, 17);
	IntValue = (Eph->w < 0) ? 1 : 0;	// w
	Value = IntValue ? (Eph->w / PI + 1) : (Eph->w / PI);
	Value = UnscaleDouble(Value, -32);
	UintValue = roundu(Value);
	Subframe2[8] |= COMPOSE_BITS(IntValue, 6, 1);
	Subframe2[8] |= COMPOSE_BITS(UintValue >> 26, 0, 6);
	Subframe2[9] = COMPOSE_BITS(UintValue >> 2, 0, 24);
	Subframe2[10] = COMPOSE_BITS(UintValue, 22, 2);

	// ephemeris2 222bits in WORD10 ~ WORD19(8MSB)
	IntValue = (Eph->omega0 < 0) ? 1 : 0;	// Omega0
	Value = IntValue ? (Eph->omega0 / PI + 1) : (Eph->omega0 / PI);
	Value = UnscaleDouble(Value, -32);
	UintValue = roundu(Value);
	Subframe2[10] |= COMPOSE_BITS(IntValue, 21, 1);
	Subframe2[10] |= COMPOSE_BITS(UintValue >> 11, 0, 21);
	Subframe2[11] = COMPOSE_BITS(UintValue, 13, 11);
	IntValue = (Eph->i0 < 0) ? 1 : 0;	// i0
	Value = IntValue ? (Eph->i0 / PI + 1) : (Eph->i0 / PI);
	Value = UnscaleDouble(Value, -32);
	UintValue = roundu(Value);
	Subframe2[11] |= COMPOSE_BITS(IntValue, 12, 1);
	Subframe2[11] |= COMPOSE_BITS(UintValue >> 20, 0, 12);
	Subframe2[12] = COMPOSE_BITS(UintValue, 4, 20);
	Value = UnscaleDouble(Eph->omega_dot / PI, -44);	// omega dot
	IntValue = roundi(Value);
	Subframe2[12] |= COMPOSE_BITS(IntValue >> 15, 0, 4);
	Subframe2[13] = COMPOSE_BITS(IntValue, 9, 15);
	Value = UnscaleDouble(Eph->idot / PI, -44);	// i dot
	IntValue = roundi(Value);
	Subframe2[13] |= COMPOSE_BITS(IntValue >> 6, 0, 9);
	Subframe2[14] = COMPOSE_BITS(IntValue, 18, 6);
	Value = UnscaleDouble(Eph->cis, -30);	// cis
	IntValue = roundi(Value);
	Subframe2[14] |= COMPOSE_BITS(IntValue, 2, 16);
	Value = UnscaleDouble(Eph->cic, -30);	// cic
	IntValue = roundi(Value);
	Subframe2[14] |= COMPOSE_BITS(IntValue >> 14, 0, 2);
	Subframe2[15] = COMPOSE_BITS(IntValue, 10, 14);
	Value = UnscaleDouble(Eph->crs, -8);	// crs
	IntValue = roundi(Value);
	Subframe2[15] |= COMPOSE_BITS(IntValue >> 14, 0, 10);
	Subframe2[16] = COMPOSE_BITS(IntValue, 10, 14);
	Value = UnscaleDouble(Eph->crc, -8);	// crc
	IntValue = roundi(Value);
	Subframe2[16] |= COMPOSE_BITS(IntValue >> 14, 0, 10);
	Subframe2[17] = COMPOSE_BITS(IntValue, 10, 14);
	Value = UnscaleDouble(Eph->cus, -30);	// cus
	IntValue = roundi(Value);
	Subframe2[17] |= COMPOSE_BITS(IntValue >> 11, 0, 10);
	Subframe2[18] = COMPOSE_BITS(IntValue, 13, 11);
	Value = UnscaleDouble(Eph->cuc, -30);	// cuc
	IntValue = roundi(Value);
	Subframe2[18] |= COMPOSE_BITS(IntValue >> 8, 0, 13);
	Subframe2[19] = COMPOSE_BITS(IntValue, 16, 8);

	// clock error 69bits in WORD19 ~ WORD22(5MSB)
	UintValue = Eph->toc / 300;	// toc
	Subframe2[19] |= COMPOSE_BITS(UintValue, 5, 11);
	Value = UnscaleDouble(Eph->af0, -34);	// af0
	IntValue = roundi(Value);
	Subframe2[19] |= COMPOSE_BITS(IntValue >> 20, 0, 5);
	Subframe2[20] = COMPOSE_BITS(IntValue, 4, 20);
	Value = UnscaleDouble(Eph->af1, -50);	// af1
	IntValue = roundi(Value);
	Subframe2[20] |= COMPOSE_BITS(IntValue >> 18, 0, 4);
	Subframe2[21] = COMPOSE_BITS(IntValue, 6, 18);
	Value = UnscaleDouble(Eph->af2, -66);	// af2
	IntValue = roundi(Value);
	Subframe2[21] |= COMPOSE_BITS(IntValue >> 5, 0, 6);
	Subframe2[22] = COMPOSE_BITS(IntValue, 19, 5);

	// TGD 36bits in WORD22 ~ WORD23(17MSB)
	Value = UnscaleDouble(Eph->tgd2, -34);	// TGD B2a
	IntValue = roundi(Value);
	Subframe2[22] |= COMPOSE_BITS(IntValue, 7, 12);
	Value = 0;//UnscaleDouble(Eph->???, -34);	// ISC B1C
	IntValue = roundi(Value);
	Subframe2[22] |= COMPOSE_BITS(IntValue >> 5, 0, 7);
	Subframe2[23] = COMPOSE_BITS(IntValue, 19, 5);
	Value = UnscaleDouble(Eph->tgd, -34);	// TGD B1C
	IntValue = roundi(Value);
	Subframe2[23] |= COMPOSE_BITS(IntValue, 7, 12);
}

// put bit in Data from MSB ot LSB into BitStream, bit order from bit(BitNumber-1) to bit(0) of Data
int BCNavBit::AssignBits(unsigned int Data, int BitNumber, int BitStream[])
{
	int i;

	Data <<= (32 - BitNumber);
	for (i = 0; i < BitNumber; i ++)
	{
		BitStream[i] = (Data & 0x80000000) ? 1 : 0;
		Data <<= 1;
	}

	return BitNumber;
}

// Append CRC to the end of data stream, Length is the size of DataStream (24bit data in each DWORD) including CRC bits
int BCNavBit::AppendCRC(unsigned int DataStream[], int Length)
{
	int i;
	unsigned int Data, crc_result = 0;

	for (i = 0; i < Length - 1; i ++)
	{
		Data = DataStream[i] << 8;	// move data to MSB
		crc_result = (crc_result << 8) ^ crc24q[(Data >> 24) ^ (unsigned char)(crc_result >> 16)];
		Data <<= 8;
		crc_result = (crc_result << 8) ^ crc24q[(Data >> 24) ^ (unsigned char)(crc_result >> 16)];
		Data <<= 8;
		crc_result = (crc_result << 8) ^ crc24q[(Data >> 24) ^ (unsigned char)(crc_result >> 16)];
		Data <<= 8;
	}
	DataStream[i] = (crc_result & 0xffffff);

	return 0;
}

int BCNavBit::B1CLDPCEncode(int SymbolStream[], int Subframe)
{
	int *pParity;
	const char *pMatrixGen;
	int SymbolLength;

	if (Subframe ==2)
	{
		SymbolLength = B1C_SUBFRAME2_SYMBOL_LENGTH;
		pMatrixGen = B1CMatrixGen2;
	}
	else if (Subframe == 3)
	{
		SymbolLength = B1C_SUBFRAME3_SYMBOL_LENGTH;
		pMatrixGen = B1CMatrixGen3;
	}
	else 
		return 1;

	pParity = SymbolStream + SymbolLength;
	GenParityMatrix(pMatrixGen, SymbolStream, pParity, SymbolLength);

	return 0;
}

// multiply MatrixGen with Symbols to generate parity symbols
void BCNavBit::GenParityMatrix(const char *MatrixGen, int *Symbols, int *Parity, int Length)
{
	int i, j;
	const char *p1 = MatrixGen;
	int *p2, sum;

	for (i = 0; i < Length; i ++)
	{
		sum = 0;
		p2 = Symbols;
		for (j = 0; j < Length; j ++)
		{
			sum ^= GF6IntMul((int)(*p1)-'0', *p2);
			p1 ++; p2 ++;
		}
		*Parity ++ = sum;
	}
}

int BCNavBit::GF6IntMul(int a, int b)
{
	if (a && b)
		return e2v_table[v2e_table[a] + v2e_table[b]];
	else
		return 0;
}
