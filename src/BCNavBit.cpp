//----------------------------------------------------------------------
// BCNavBit.h:
//   Implementation of navigation bit synthesis class for B-CNAV1
//
//          Copyright (C) 2020-2029 by Jun Mo, All rights reserved.
//
//----------------------------------------------------------------------

#include <memory.h>
#include "ConstVal.h"
#include "BCNavBit.h"

// table for BCH(21,6) encode
const unsigned int BCNavBit::BCH_prn_table[64] = {
0x000000, 0x00a4cb, 0x014996, 0x01ed5d, 0x0237e7, 0x02932c, 0x037e71, 0x03daba, 0x046fce, 0x04cb05, 0x052658, 0x058293, 0x065829, 0x06fce2, 0x0711bf, 0x07b574, 
0x087b57, 0x08df9c, 0x0932c1, 0x09960a, 0x0a4cb0, 0x0ae87b, 0x0b0526, 0x0ba1ed, 0x0c1499, 0x0cb052, 0x0d5d0f, 0x0df9c4, 0x0e237e, 0x0e87b5, 0x0f6ae8, 0x0fce23, 
0x105265, 0x10f6ae, 0x111bf3, 0x11bf38, 0x126582, 0x12c149, 0x132c14, 0x1388df, 0x143dab, 0x149960, 0x15743d, 0x15d0f6, 0x160a4c, 0x16ae87, 0x1743da, 0x17e711, 
0x182932, 0x188df9, 0x1960a4, 0x19c46f, 0x1a1ed5, 0x1aba1e, 0x1b5743, 0x1bf388, 0x1c46fc, 0x1ce237, 0x1d0f6a, 0x1daba1, 0x1e711b, 0x1ed5d0, 0x1f388d, 0x1f9c46, 
};

// table for BCH(51,8) encode
const unsigned long long BCNavBit::BCH_soh_table[256] = {
0x0000000000000LL, 0x00f3a905b4be3LL, 0x0114fb0eddc25LL, 0x01e7520b697c6LL, 0x0229f61dbb84aLL, 0x02da5f180f3a9LL, 0x033d0d136646fLL, 0x03cea416d2f8cLL, 
0x0453ec3b77094LL, 0x04a0453ec3b77LL, 0x05471735aacb1LL, 0x05b4be301e752LL, 0x067a1a26cc8deLL, 0x0689b3237833dLL, 0x076ee128114fbLL, 0x079d482da5f18LL, 
0x085471735aacbLL, 0x08a7d876ee128LL, 0x09408a7d876eeLL, 0x09b3237833d0dLL, 0x0a7d876ee1281LL, 0x0a8e2e6b55962LL, 0x0b697c603cea4LL, 0x0b9ad56588547LL, 
0x0c079d482da5fLL, 0x0cf4344d991bcLL, 0x0d136646f067aLL, 0x0de0cf4344d99LL, 0x0e2e6b5596215LL, 0x0eddc250229f6LL, 0x0f3a905b4be30LL, 0x0fc9395eff5d3LL, 
0x105b4be301e75LL, 0x10a8e2e6b5596LL, 0x114fb0eddc250LL, 0x11bc19e8689b3LL, 0x1272bdfeba63fLL, 0x128114fb0eddcLL, 0x136646f067a1aLL, 0x1395eff5d31f9LL, 
0x1408a7d876ee1LL, 0x14fb0eddc2502LL, 0x151c5cd6ab2c4LL, 0x15eff5d31f927LL, 0x162151c5cd6abLL, 0x16d2f8c079d48LL, 0x1735aacb10a8eLL, 0x17c603cea416dLL, 
0x180f3a905b4beLL, 0x18fc9395eff5dLL, 0x191bc19e8689bLL, 0x19e8689b32378LL, 0x1a26cc8de0cf4LL, 0x1ad5658854717LL, 0x1b3237833d0d1LL, 0x1bc19e8689b32LL, 
0x1c5cd6ab2c42aLL, 0x1caf7fae98fc9LL, 0x1d482da5f180fLL, 0x1dbb84a0453ecLL, 0x1e7520b697c60LL, 0x1e8689b323783LL, 0x1f61dbb84a045LL, 0x1f9272bdfeba6LL, 
0x20453ec3b7709LL, 0x20b697c603ceaLL, 0x2151c5cd6ab2cLL, 0x21a26cc8de0cfLL, 0x226cc8de0cf43LL, 0x229f61dbb84a0LL, 0x237833d0d1366LL, 0x238b9ad565885LL, 
0x2416d2f8c079dLL, 0x24e57bfd74c7eLL, 0x250229f61dbb8LL, 0x25f180f3a905bLL, 0x263f24e57bfd7LL, 0x26cc8de0cf434LL, 0x272bdfeba63f2LL, 0x27d876ee12811LL, 
0x28114fb0eddc2LL, 0x28e2e6b559621LL, 0x2905b4be301e7LL, 0x29f61dbb84a04LL, 0x2a38b9ad56588LL, 0x2acb10a8e2e6bLL, 0x2b2c42a38b9adLL, 0x2bdfeba63f24eLL, 
0x2c42a38b9ad56LL, 0x2cb10a8e2e6b5LL, 0x2d56588547173LL, 0x2da5f180f3a90LL, 0x2e6b55962151cLL, 0x2e98fc9395effLL, 0x2f7fae98fc939LL, 0x2f8c079d482daLL, 
0x301e7520b697cLL, 0x30eddc250229fLL, 0x310a8e2e6b559LL, 0x31f9272bdfebaLL, 0x3237833d0d136LL, 0x32c42a38b9ad5LL, 0x33237833d0d13LL, 0x33d0d136646f0LL, 
0x344d991bc19e8LL, 0x34be301e7520bLL, 0x355962151c5cdLL, 0x35aacb10a8e2eLL, 0x36646f067a1a2LL, 0x3697c603cea41LL, 0x37709408a7d87LL, 0x37833d0d13664LL, 
0x384a0453ec3b7LL, 0x38b9ad5658854LL, 0x395eff5d31f92LL, 0x39ad565885471LL, 0x3a63f24e57bfdLL, 0x3a905b4be301eLL, 0x3b7709408a7d8LL, 0x3b84a0453ec3bLL, 
0x3c19e8689b323LL, 0x3cea416d2f8c0LL, 0x3d0d136646f06LL, 0x3dfeba63f24e5LL, 0x3e301e7520b69LL, 0x3ec3b7709408aLL, 0x3f24e57bfd74cLL, 0x3fd74c7e49cafLL, 
0x4079d482da5f1LL, 0x408a7d876ee12LL, 0x416d2f8c079d4LL, 0x419e8689b3237LL, 0x4250229f61dbbLL, 0x42a38b9ad5658LL, 0x4344d991bc19eLL, 0x43b7709408a7dLL, 
0x442a38b9ad565LL, 0x44d991bc19e86LL, 0x453ec3b770940LL, 0x45cd6ab2c42a3LL, 0x4603cea416d2fLL, 0x46f067a1a26ccLL, 0x471735aacb10aLL, 0x47e49caf7fae9LL, 
0x482da5f180f3aLL, 0x48de0cf4344d9LL, 0x49395eff5d31fLL, 0x49caf7fae98fcLL, 0x4a0453ec3b770LL, 0x4af7fae98fc93LL, 0x4b10a8e2e6b55LL, 0x4be301e7520b6LL, 
0x4c7e49caf7faeLL, 0x4c8de0cf4344dLL, 0x4d6ab2c42a38bLL, 0x4d991bc19e868LL, 0x4e57bfd74c7e4LL, 0x4ea416d2f8c07LL, 0x4f4344d991bc1LL, 0x4fb0eddc25022LL, 
0x50229f61dbb84LL, 0x50d136646f067LL, 0x5136646f067a1LL, 0x51c5cd6ab2c42LL, 0x520b697c603ceLL, 0x52f8c079d482dLL, 0x531f9272bdfebLL, 0x53ec3b7709408LL, 
0x5471735aacb10LL, 0x5482da5f180f3LL, 0x5565885471735LL, 0x55962151c5cd6LL, 0x565885471735aLL, 0x56ab2c42a38b9LL, 0x574c7e49caf7fLL, 0x57bfd74c7e49cLL, 
0x5876ee128114fLL, 0x5885471735aacLL, 0x5962151c5cd6aLL, 0x5991bc19e8689LL, 0x5a5f180f3a905LL, 0x5aacb10a8e2e6LL, 0x5b4be301e7520LL, 0x5bb84a0453ec3LL, 
0x5c250229f61dbLL, 0x5cd6ab2c42a38LL, 0x5d31f9272bdfeLL, 0x5dc250229f61dLL, 0x5e0cf4344d991LL, 0x5eff5d31f9272LL, 0x5f180f3a905b4LL, 0x5feba63f24e57LL, 
0x603cea416d2f8LL, 0x60cf4344d991bLL, 0x6128114fb0eddLL, 0x61dbb84a0453eLL, 0x62151c5cd6ab2LL, 0x62e6b55962151LL, 0x6301e7520b697LL, 0x63f24e57bfd74LL, 
0x646f067a1a26cLL, 0x649caf7fae98fLL, 0x657bfd74c7e49LL, 0x65885471735aaLL, 0x6646f067a1a26LL, 0x66b55962151c5LL, 0x67520b697c603LL, 0x67a1a26cc8de0LL, 
0x68689b3237833LL, 0x689b3237833d0LL, 0x697c603cea416LL, 0x698fc9395eff5LL, 0x6a416d2f8c079LL, 0x6ab2c42a38b9aLL, 0x6b55962151c5cLL, 0x6ba63f24e57bfLL, 
0x6c3b7709408a7LL, 0x6cc8de0cf4344LL, 0x6d2f8c079d482LL, 0x6ddc250229f61LL, 0x6e128114fb0edLL, 0x6ee128114fb0eLL, 0x6f067a1a26cc8LL, 0x6ff5d31f9272bLL, 
0x7067a1a26cc8dLL, 0x709408a7d876eLL, 0x71735aacb10a8LL, 0x7180f3a905b4bLL, 0x724e57bfd74c7LL, 0x72bdfeba63f24LL, 0x735aacb10a8e2LL, 0x73a905b4be301LL, 
0x74344d991bc19LL, 0x74c7e49caf7faLL, 0x7520b697c603cLL, 0x75d31f9272bdfLL, 0x761dbb84a0453LL, 0x76ee128114fb0LL, 0x7709408a7d876LL, 0x77fae98fc9395LL, 
0x7833d0d136646LL, 0x78c079d482da5LL, 0x79272bdfeba63LL, 0x79d482da5f180LL, 0x7a1a26cc8de0cLL, 0x7ae98fc9395efLL, 0x7b0eddc250229LL, 0x7bfd74c7e49caLL, 
0x7c603cea416d2LL, 0x7c9395eff5d31LL, 0x7d74c7e49caf7LL, 0x7d876ee128114LL, 0x7e49caf7fae98LL, 0x7eba63f24e57bLL, 0x7f5d31f9272bdLL, 0x7fae98fc9395eLL, 
};

const unsigned int BCNavBit::crc24q[256] = {
	0x00000000u, 0x01864CFBu, 0x028AD50Du, 0x030C99F6u, 0x0493E6E1u, 0x0515AA1Au, 0x061933ECu, 0x079F7F17u,
	0x08A18139u, 0x0927CDC2u, 0x0A2B5434u, 0x0BAD18CFu, 0x0C3267D8u, 0x0DB42B23u, 0x0EB8B2D5u, 0x0F3EFE2Eu,
	0x10C54E89u, 0x11430272u, 0x124F9B84u, 0x13C9D77Fu, 0x1456A868u, 0x15D0E493u, 0x16DC7D65u, 0x175A319Eu,
	0x1864CFB0u, 0x19E2834Bu, 0x1AEE1ABDu, 0x1B685646u, 0x1CF72951u, 0x1D7165AAu, 0x1E7DFC5Cu, 0x1FFBB0A7u,
	0x200CD1E9u, 0x218A9D12u, 0x228604E4u, 0x2300481Fu, 0x249F3708u, 0x25197BF3u, 0x2615E205u, 0x2793AEFEu,
	0x28AD50D0u, 0x292B1C2Bu, 0x2A2785DDu, 0x2BA1C926u, 0x2C3EB631u, 0x2DB8FACAu, 0x2EB4633Cu, 0x2F322FC7u,
	0x30C99F60u, 0x314FD39Bu, 0x32434A6Du, 0x33C50696u, 0x345A7981u, 0x35DC357Au, 0x36D0AC8Cu, 0x3756E077u,
	0x38681E59u, 0x39EE52A2u, 0x3AE2CB54u, 0x3B6487AFu, 0x3CFBF8B8u, 0x3D7DB443u, 0x3E712DB5u, 0x3FF7614Eu,
	0x4019A3D2u, 0x419FEF29u, 0x429376DFu, 0x43153A24u, 0x448A4533u, 0x450C09C8u, 0x4600903Eu, 0x4786DCC5u,
	0x48B822EBu, 0x493E6E10u, 0x4A32F7E6u, 0x4BB4BB1Du, 0x4C2BC40Au, 0x4DAD88F1u, 0x4EA11107u, 0x4F275DFCu,
	0x50DCED5Bu, 0x515AA1A0u, 0x52563856u, 0x53D074ADu, 0x544F0BBAu, 0x55C94741u, 0x56C5DEB7u, 0x5743924Cu,
	0x587D6C62u, 0x59FB2099u, 0x5AF7B96Fu, 0x5B71F594u, 0x5CEE8A83u, 0x5D68C678u, 0x5E645F8Eu, 0x5FE21375u,
	0x6015723Bu, 0x61933EC0u, 0x629FA736u, 0x6319EBCDu, 0x648694DAu, 0x6500D821u, 0x660C41D7u, 0x678A0D2Cu,
	0x68B4F302u, 0x6932BFF9u, 0x6A3E260Fu, 0x6BB86AF4u, 0x6C2715E3u, 0x6DA15918u, 0x6EADC0EEu, 0x6F2B8C15u,
	0x70D03CB2u, 0x71567049u, 0x725AE9BFu, 0x73DCA544u, 0x7443DA53u, 0x75C596A8u, 0x76C90F5Eu, 0x774F43A5u,
	0x7871BD8Bu, 0x79F7F170u, 0x7AFB6886u, 0x7B7D247Du, 0x7CE25B6Au, 0x7D641791u, 0x7E688E67u, 0x7FEEC29Cu,
	0x803347A4u, 0x81B50B5Fu, 0x82B992A9u, 0x833FDE52u, 0x84A0A145u, 0x8526EDBEu, 0x862A7448u, 0x87AC38B3u,
	0x8892C69Du, 0x89148A66u, 0x8A181390u, 0x8B9E5F6Bu, 0x8C01207Cu, 0x8D876C87u, 0x8E8BF571u, 0x8F0DB98Au,
	0x90F6092Du, 0x917045D6u, 0x927CDC20u, 0x93FA90DBu, 0x9465EFCCu, 0x95E3A337u, 0x96EF3AC1u, 0x9769763Au,
	0x98578814u, 0x99D1C4EFu, 0x9ADD5D19u, 0x9B5B11E2u, 0x9CC46EF5u, 0x9D42220Eu, 0x9E4EBBF8u, 0x9FC8F703u,
	0xA03F964Du, 0xA1B9DAB6u, 0xA2B54340u, 0xA3330FBBu, 0xA4AC70ACu, 0xA52A3C57u, 0xA626A5A1u, 0xA7A0E95Au,
	0xA89E1774u, 0xA9185B8Fu, 0xAA14C279u, 0xAB928E82u, 0xAC0DF195u, 0xAD8BBD6Eu, 0xAE872498u, 0xAF016863u,
	0xB0FAD8C4u, 0xB17C943Fu, 0xB2700DC9u, 0xB3F64132u, 0xB4693E25u, 0xB5EF72DEu, 0xB6E3EB28u, 0xB765A7D3u,
	0xB85B59FDu, 0xB9DD1506u, 0xBAD18CF0u, 0xBB57C00Bu, 0xBCC8BF1Cu, 0xBD4EF3E7u, 0xBE426A11u, 0xBFC426EAu,
	0xC02AE476u, 0xC1ACA88Du, 0xC2A0317Bu, 0xC3267D80u, 0xC4B90297u, 0xC53F4E6Cu, 0xC633D79Au, 0xC7B59B61u,
	0xC88B654Fu, 0xC90D29B4u, 0xCA01B042u, 0xCB87FCB9u, 0xCC1883AEu, 0xCD9ECF55u, 0xCE9256A3u, 0xCF141A58u,
	0xD0EFAAFFu, 0xD169E604u, 0xD2657FF2u, 0xD3E33309u, 0xD47C4C1Eu, 0xD5FA00E5u, 0xD6F69913u, 0xD770D5E8u,
	0xD84E2BC6u, 0xD9C8673Du, 0xDAC4FECBu, 0xDB42B230u, 0xDCDDCD27u, 0xDD5B81DCu, 0xDE57182Au, 0xDFD154D1u,
	0xE026359Fu, 0xE1A07964u, 0xE2ACE092u, 0xE32AAC69u, 0xE4B5D37Eu, 0xE5339F85u, 0xE63F0673u, 0xE7B94A88u,
	0xE887B4A6u, 0xE901F85Du, 0xEA0D61ABu, 0xEB8B2D50u, 0xEC145247u, 0xED921EBCu, 0xEE9E874Au, 0xEF18CBB1u,
	0xF0E37B16u, 0xF16537EDu, 0xF269AE1Bu, 0xF3EFE2E0u, 0xF4709DF7u, 0xF5F6D10Cu, 0xF6FA48FAu, 0xF77C0401u,
	0xF842FA2Fu, 0xF9C4B6D4u, 0xFAC82F22u, 0xFB4E63D9u, 0xFCD11CCEu, 0xFD575035u, 0xFE5BC9C3u, 0xFFDD8538u,
};

const char BCNavBit::B1CMatrixGen2[B1C_SUBFRAME2_SYMBOL_LENGTH*B1C_SUBFRAME2_SYMBOL_LENGTH+1] = {
"8hH6iX^5g41GGbCK<`Y?PK@dP_8=28CH0000i@VO5Oa8Tj?Sc9W]1c<m@93VfGLAAeZV=Qb^0SMk0000k6c\\LIoDbF7@3BFgF::k"
"QP=bFSU[NMmcRe^iWJm`5DO7]FjA_j^P0000FKO7[9njS?Hd3<Y_S3WSSMIOXd@11alDAKjU0dRQ0000ib7:@HTQe94gIH9N9EEi"
"Vg82Gh33\\mDPPG`X;@D9cUS7QGVjXi`Y0000_Ol]3d5Vh4>e]7MoDO4hhb:SBPj?iCKUjOi3?Pg;0000X2][S>iV_d_a1>dnd>6X"
"h^;:8M?K3<7VVH:>T27]UgcKS8hS>he;0000Ec9NKQAhiD]TOoZ67OmMMo9FIVGddSdgSPH?04^W0000W:O1Y<H_EQEc9fQ3Qff>"
"ONQ?cPI4B;Z]]F3Ga1Z<oLn_ocOKGO3Q0000dnmb47[OAM<aleVTZlYJPem1H]?DD5g6KEFI02NS0000Sil>?;=@C7Cnm87B788G"
"]mf\\>Iej`9ckk:b[K_d=8PWV;>BXUBbm0000>hWYjYLB2H=MiQDS4iK7TQFW3koGGESPXhBe0MC[0000[\\V@o1RZ:8OTF18`8gg["
"GJ_KL8YgSB[ejDWEfM[3@P=1FLGCETWi0000Lcn?gAJT8`2ja1X98cf88B\\=6jm^TZ5PCcTg0jVH0000EK?R=2TGDAn;\\2ASA]]E"
"iYD]THJJVfn==_Zo4Wn5QSa3jTijoiZ80000lF1dJc^iHI64A3kKnF>HH7OG:=ea?j?SjF_J0=YX0000X]AUGf_<lclMg6c\\c6do"
"0000k0A0f0700000000000000a070X0YjTLQ000000000000000000000000c0:000000N0Y0000040C0X0E0000X0o0:0;00000"
"00000=0_0W0F000000000000>020F0\\06IFZ0000000000000000000000000_0?0000F0>00000h0N0]0`000000k0;0V0[0000"
"0000k0]0m0700000000000000a0b0X0gQGLQ000000000000000000000000d0:000000N0g0000040F0;0E0000;0o0B0;00000"
"00000a0S0?0J000000000000a0D060d0lC680000000000000000000000000S0U000060_000001090n0]000000^0=0[020000"
"PUeEjVnnRW4OOja8`^4l6N3DdjPd8=aS0000L]<onK1PVZX`9Dhb4];VVT2QkOc37@7Nd]=n0OUY0000YE9fQX=CLKLJ[XKIKXo8"
"\\1gQSJ7bDCTRRVk;j]TEfHKkfS\\N;\\cg0000UK_>b69\\PeEj28aXT2@cJ8_]ZRQooOo[NBV70I1^0000^M2<QCV=i6iK_W6D6WW;"
"]mf\\>Iej`9ckk:bPK_d=8PWV;>BXUBbf0000>hWYjYLB2H=MiQDS4iK7TQFW3koGGESWXhBe0MC[0000[\\V@o1R]:8OTF18`8gg["
"GJ_KL8YgSB[eVDWEfM[3@P=1FLGC9TWi0000Lcn?gAJT8`2ja1X98cf88B\\=6jm^^Z5PCcTg0jVH0000EK?Rm2TGDAn;\\2ASA]]E"
"VgT2Gh33\\mDPPG`X;@D9cU?7QGVjXi`Y0000_Ol]3d5Vh4>e]7MoDOWhhb:SBPj?iCKUjOi3?Pg;0000;2][S>iV_d_a1>dnd>6X"
"Bmfo6Iej`5ckk:VUKPc=;WTVX6BXUB7f0000OTFYj8LB2?=KiQnSci17IQF_JkoGGXGWXH:e03m[0000[\\i@>5:]O8OTFg8`8ggU"
"i5^ZgaKo7=b\\\\hQkGO32NkdB[YJUWJQ^0000gd1fof]JVR2n:Xc>?:GjdXE1e\\S66PF1UIhK0nA@0000@ZBlSLMihNHdECN7Nmm@"
"Qn=bFSU[NMmcRe^iWJm`5:O7]FjA_j^P0000FKO7[9njS?Hd3<Y_SKWSSMIOXd@11alDAKjU0dRQ0000ib7B@HTQe94gIH9N9EEi"
"d:O5AQfm>hWKKcT=^eW4Ee[TEAd9=dgO0000`[Z_mlId?;4^DCSLWDVgQCZn8K5<<3<297cf0o:P0000PGDk]hca`l`[Zil>lii="
"i5^ZgaKo7=b\\\\hQkGO32Nk1B[gJUWJQ^0000gd1fof]JVR2n:Xc>?:GjdXE1e\\S66P>1UIhK0n9@0000@ZBlSLMihNHdECN7Nmm@"
"32^Zg?Ko7=8\\9hQ@GO8VNl1X[g3UWJQ50000gI1Bof2J?RCn:XcW?IG??=E1enS66P>lUIJK0n9A0000@ZB_SCM3hfHdECf7fmm@"
"2>?=K:ZZkgaEEKnQN[aC8X4`bK2bQ]n60000A_@LZTm2:JS3L`Rja_U::cioVE74e1eX7_]Z0E>N0000N=L;oS]2ATAIWSTMTSGQ"
"00000m0[0C0W000000000000K050W0=0?DW20000000000000000000000000H0h0000P0K00000_0c0^0k00000090b0L0Q0000"
"000090^060n00000000000000H0n070G`4m`000000000000000000000000a0]000000d0G00000:0W0b010000b030]0b00000"
"00000i0`0V03000000000000i0:030J0NX3Y0000000000000000000000000`0[000030i00000Q0U0O0g000000G0W0d010000"
"0000L0U080B00000000000000P0B0e0c3M;3000000000000000000000000n0l00000070d00000H0Y0e0m0000e040l0j00000"
"0000020O010E000000000000g0m0E0Z04aE30000000000000000000000000O0T0000E0g00000I0;0f07000000\\0[0B0b0000"
"0000F0m0S0M00000000000000:0M0c0oDJgD00000000000000000000000040L000000T0o00000V0[0c0@0000d0`0L0d00000"
"00000S0A0U0Q000000000000Z0>0l010BhQC0000000000000000000000000A0]0000l0Z00000:0I060F000000P0a0g0D0000"
"000040P0l0600000000000000e060m0@YXHY000000000000000000000000S0n00000010@00000b0i0m0:0000m0f0n0m00000"
"iYD]THJ3Vfn==_Zo4Wn5QSa3jTijoiZ80000lF1d3c^iHI64A3kKnA>HH7O@:=ea?j?SjF_J0=YX0000X]AUGf_<lclMg6c\\c6do"
"ONQ?dPI4B;Z]]F3Ga1Z<oLn_ocOKGO3Q0000dnmb4b[OAM<aleVTZlaJnem1H]?DD5g6KEFI02NS0000Sil>?;=@C7Cnm87B788G"
"=1gMU37bDFTRRVd^j]GE6H[kfU\\N;\\d10000UB[>b>E\\P:EI28?X32j3KF_[`RQooOXHNB\\70Il^0000^Mk<Q@hnV6iK_@6D6WW^"
"32^Zg?oo7=8\\nhQ@GO8kNl1X[g3U@JQ50000gIHBof23?RCn:XcW8IG??=41enS6JP>lUIJo0n9A0000@ZB_1CJ3hfHdECf7fmm@"
"6B:S2NmCWJ@oodlj5D@eHj<GH]6EP6l:00002<`iCi46KbeXTF[=@T51<F`kYo9LL7nkE8dm0XIR0000RSTM9JQ?c_c<`\\_W_VVP"
"VY82GhJ3\\mn=g_`X4@D5c9S]QGijoi`Y0000GOSd3d5ihF>PA7MohA4hhm1SB=e??CK9jOiJ0PgV0000X2]Ue>EV_cla1>d\\c66X"
"`FmnWeQQcE6MaW8<oi6RYA@N^W`;<Z8C0000WJ:\\QgP`eolX\\NT[6Joeef3@7aXSZHUA;JZQSaFL0000<n\\]@lZ`Bg:GOlgdg11<"
"9oKC3]kMEShll5Cc\\NhWTbBMD39Dc9RK0000^<;eM4>91VW\\maO`hmQ]]a;f=lnBZDZbD<5k0Pod0000dCm87S5g^4^:;j4H4jec"
":fNidR4eB^`22OiS?1`LX>Deod:oS:3N0000FEC8eb<:RaY?_j\\G`_gRRjClh2KDToT>oEO402fU0000Ui_W6^OAFbFnmYbZbY8S"
"aA@4^`d6K_oJJMSB8Po:1BQI1;agmaS@0000^Q2[6[Oahb:8R>jfoR8GQ>25DJYNNV=5gnMd03AC0000C4R9Y_ZHkUkQ2<UKU<<m"
"HXoObkMah[J_;946nm3@eA8FGbETdE4X0000b=8jaj@ElL@iC?BdkCnkk[^8R_D``<cAT=EM0i;600006OFYDN]H9e5Z^NeheQQ6"
"5KamJA229GHg1JP`iQH>R73knJ5\\`^P?0000J[Xf2I65AUe1fkFZH[iAAM<3L1V:^SB7\\[^201Kc0000`mfb3e^5;IXOoeI9I44`"
"0000000000000000000000000000000000000000k`?L0000?95e000000000000000000000000Q3480000000000000000QNoW"
"0000000000000000000000000000000000000000N<C<0000C5`l000000000000000000000000iJ120000000000000000iQOI"
"0000000000000000000000000000000000000000VA9A00009L<F000000000000000000000000:4aV0000000000000000:XGa"
"0000000000000000000000000000000000000000k`FL0000F95e000000000000000000000000V3480000000000000000VNoW"
"Cjel`LPROo:@@mh[kYFU?[V1?ZCaDChe0000`Vc3R3SCW^UAgIin:gkHVINc9@M\\\\;8ca5mP0AGT0000TlgdMo<>mJfVNbJOJ77T"
"VY82GhJ3\\mn=g_`X4@DLc9S]QGijoi`Y0000GOS]3d5ihF>PA7MohA4hhm1SB=e??CK9jOiJ0PgV0000X2]Ue>EV_dla1>d\\d66X"
">Z:S2fCCW3AoX2lRIDAj_MkFH2>ER6lB0000d8cGCie>f5\\9GF[PA85ffOYkgX9L67=ME86CLXZI0000RSGak\\6>did<`\\i@i\\VR"
"_8bADEhJiN\\LLlAKI5\\^jGMJeD_eK_Bb00001MgcJ`;_<R^I@32?\\@6EE3gWOL4MaeaGeClh0:8o0000oA@STNl[1`1Mgd`V`ddK"
"YK?C3A2kESH11^RWVN9>DW:mDJ5n`5R?00003:74k465g[>lfMOZ]fVP:MX7=1\\BBUQ7n<^20ldc0000cCfb\\G@Y^I;:XjIEIeec"
"RlSHQ\\nDI@eO[=?Y`5eFK_NE6QPd8P?U0000Q2NEDolP\\];:9TJ8\\2`\\\\@<NM:c77Ab_d2Pn0:[R0000YHEfc;iR=oL3<;oIoXXY"
"AdM<aF::]8k55aVejSkf\\K?B3aAJe@Vc0000W1>[:nNAFHTh[B=4k1GFFZl?_5JR@YIKJ1@:R5dj0000e<[o?T@AWnWP6Tn2nTDe"
"jP=@CGU[Nkfcce7_WDfn]Og[ACjA_j;=00004gI9[5\\j`>nW3<8lf3H;G<IJoc@11A1OA?eU0XPi0000i73:FkeZ454gIE5N5EE_"
"NIR]:U<LmaC66Q9VA7CTkGl8kON2VN9R0000:leHLEDNd@TAb=giCbJ5l=e7;6]__K3B2XQ<0>I\\0000\\YbZ]aScjEjlehEmEhhV"
"nHEd_X;^YIgTT7m2[Z1aC?ic=_bL]bmH0000_jiF^FMbDeaG`5>AX`[fWIJiNT<@@4A?Ljb;0Gh200002dcV<:K87C3WJ:CYCOO2"
"V582Gh33\\mD=P_`X4@D9cUS7QGVjXi`Y0000GOl]3d5ihF>PA7MohO4hhm:SBPe?iCKUjOi30Pg;0000X2][S>iV_dla1>d\\d66X"
"<TR^IliVLdPmm[23:oPY`eHVZI<Z3<2D0000UWSaiM8<lO?:;V9JPWKll\\@XAmBHhZheZW[i0mT700007^;j4d[NUMUEG?M=M?a3"
"0000f0j0D0]00000000000000C0]0B0MiEbV000000000000000000000000P0U000000\\0M00000l0T0B060000B0:0U0Z00000"
"00000S080U0Q000000000000Z0>0Q010B<QC0000000000000000000000000A0]0000Q0Z00000^0I060F000000W0a0g0D0000"
"0000W060e0H00000000000000A0H0M03RVGR000000000000000000000000:0m000000I0300000L0Q0a0X0000a0k0m0a00000"
"0000060l0>0C00000000000060Y0C0m0hRC50000000000000000000000000l0a0000C0J00000H0M080Z00000020n0i0`0000"
"1oJW\\59EljiU7YOa=diX:DnHI\\1RagO30000\\f8>EBog5N`[6HAM5f=55jbnC[P22QkDRfgE0[7?0000aW>Tn`g1YB8]b`BlBZZa"
"XM9QE>@@;n588E<:l45cVhCAiEXi:X<k0000KG?P@=`X>1RljAfO5GI>>]SHU8_CFDFhiGo@08MB0000BQjJHno7K=KmaR=^=RP:"
"173R\\5EH_ji[[gWaP6iX4;2W4\\1Ia1:30000n28ZHBo1U=XP>hAMi>cO5h86C[RkkNkDImgE0<7?0000?@>TRj^SYBY28`B_B``a"
"mSGEji\\nRWIFFLalZ^41?lQ9dj=cb=aS0000j]QKnKg=CA1O5Dh7V5ZMJD[QkF`33@7Qc]=\\0OU800008E9N`X_PL?<J[X?R?oo8"
"CjB1ZLPPFo:@@ZHDT8:U?cVRaZCaDmHe0000f^N3PJSCL27kgR_n:^bLLI5`9@MV\\X\\cM^mP0@jT0000T1gd`7m>fJfiQ7JOJ73D"
"173R\\5EH_ji[[gWaP;iX4;2W4\\1Ia1O30000n28ZHBo1U=XP>hAMi>cO5h86C[RkkNkDIfgE0<7?0000?@>TRjgSYBY28`B_B``a"
"6e41Z<=PFoOWWfHU28CShU`gaZmMnmH40000Z^`JPJGm>;S@YR_\\LY2EiRQ`9WkVVX\\`M^f=0@jD0000D1gck7[6fhNiQ7hFh33D"
"V582GhJ3\\mD=g_`X4@DLcUS7QGVjoi`Y0000GOl]3d5ihF>PA7MohO4hhm1SBPe??CKUjOiJ0Pg;0000X2][e>iV_dla1>d\\d66X"
">Z]S2fCCW3AXX2lRIDAjhMLFH2>ER6lB0000d8cGCie>f5\\9GF[PA8nffOYkgXEL67=ME86C0XZI0000ISGak\\6>did<`\\i@i\\VR"
"me4kB<=PFKOWWfgn2UOSaUigMBmMnmE40000NiQJPhGm>]S2YRl\\OY7E<RQ85WkVVMV`M;f=0@eD0000D1YcZKf6NhNiQ3hFh33n"
"YK?C3A2kESH11^RWVN9>IW7mDJ5n`5R?00003:74k465g[>lfMOZ]fVP:MX7=1\\BBUQ7n<^20loc0000cCmb\\G@Y^I;:XjIEIeec"
"V582GhJ3\\mD=g_`X4@DLcUS7QGijoi`Y0000GOS]3d5ihF>PA7MohO4hhm1SBPe??CK9jOiJ0Pg;0000X2][e>EV_dla1>d\\d66X"
"00000e0D0j0`00000000000020K0U0S0]_`>0000000000000000000000000;0^0000U0200000A0O0?0W000000o0H0G0R0000"
"0000o0?0B0l00000000000000;0l0H0VFLeF000000000000000000000000A06000000:0V00000m0`0H070000H09060H00000"
"0000030N070X00000000000030e0X0C0LAX90000000000000000000000000N0i0000X0300000<0a040E00000010O0m0H0000"
"0000G0n0h0m00000000000000U0m0=0:9@a9000000000000000000000000l0b000000E0:00000;030=0e0000=0L0b0P00000"
"00000S080`0Q000000000000Z030Q010B<QC000000000000000000000000080]0000Q0Z00000^0I060F000000W0a0g0O0000"
"0000W060e0E00000000000000A0E0M03RVGR000000000000000000000000:0f000000I0300000L0Q0a0X0000a0k0f0a00000"
"00000A0\\0]0500000000000080_0B0:0bjBh0000000000000000000000000\\0n0000B080000070o0l06000000?0S0O0>0000"
"0000L0U0b0B00000000000000=0B0e0cJM;3000000000000000000000000\\0l00000070c00000H0Y0e0m0000e040l0e00000"
"R[UhN\\DT4@e::PKic9e_>i7H>QR6YRKU0000N7fXTXlRO2_BEG38eEc?7GLfM:dbb]5f6kPD0B1g0000ghEmd@VFPo=7L^o4o;;Y"
"LTD54_iV=6PmG[k7:XRYMge^`4<Z3<kT00004@e^VaY<_WKC;\\E3_;:__6Se]mBhh>JgZ@<i0CGL000075^jBK1L[aUHSKa=M??7"
"FQel`=RROXB@A`hTkYB[JdcI?`FaTChj0000m5f1R3UF=kbM1IiDB5k==49cEAM\\C;nda5CR\\AQG0000Tl16cbCFm3mVNb3:377T"
"ok2j96W@X\\^bbKjO1I^`iHm@_9o_Oo[20000?ma=@LZo7g`1eANF^eR66Aa4SblmC_CH_TKW0Uk:0000:jehE\\K3?L?maPL;LP=O"
"f4IY:[L=m?F>>NY\\]7FGMZ_=k:fk\\f9I0000QXjh=HTf[AG]8P1VF83[[Pjb^>2_ikiZkXNL054n0000nY8`B?NdQHQleJHCHJh\\"
"Cjel`LPROo:@@mh[kY:U?[V1?ZCaDChe0000`VN3R3SCW2UAgIin:gkHVINc9@M\\\\;8ca5mP0AGT0000TlgdMo<>fJfVN7JOJ77D"
";MkNHW@A^D58aoLBle9c=dhQVHXi:XLM0000HShPAPcXWGcYj]m:WjlWWD?h[8_FFTOdiSX@0Ya;0000BNQJ_I6;o=KC?I=^=RRB"
"kW6PoB``M1?EHoDN3<?FT;Xc8okbN2D>0000oiA=`GCkB3UH=cIQ?i3BBdVX\\H7e2lj;bi2`eHWf0000NP=^XU2k]GA4@UGMGSSN"
"00000000000000000000000000000000000000009kWf0000hgYB000000000000000000000000`V:D0000000000000000Lc3o"
"0000000000000000000000000000000000000000TYUM0000U>R;00000000000000000000000052XC000000000000000059<i"
"0000000000000000000000000000000000000000ITjT0000jK?b000000000000000000000000Y5<>0000000000000000YRN<"
"0000000000000000000000000000000000000000L;g;0000gfNh000000000000000000000000A:H`0000000000000000A74H"
"<TDB4liV=dPmm[kg:XPY`gH^`I<Z3<kD00004HSaVa8<fOY:;\\9JP;:2H\\SeAmBhh>oeZ@[i0CT7000075;jBd1NUMUHS?M=M??3"
"S73@n9EH_Qi[bg:?P6VXB;DW4n1Ia1:70000nmDZHZX1UfX<>h]M9>P99Q8DF[RkkNM;Im1E0<b?0000?@WTRc^lgBY28cB_B``?"
"RlSHQ\\DDI@eO:Q?Y`5e_KfNT6QRdYP?U0000Q2LEDolR\\];:9TJ8e2`\\\\GkNM:c7PAbfd2PD0:[g0000YHEmN;PR=oL3<;oIoXXY"
"YJ_6i;59g4lSS86kL`lKR\\A9PiYPkYCh0000bQ7:9O?Y;<BLd9W2ldZ;;E7cfS=A]P]\\PQ850SJM0000M6dnV48TbOb@3BO1OB:k"
};
const char BCNavBit::B1CMatrixGen3[B1C_SUBFRAME3_SYMBOL_LENGTH*B1C_SUBFRAME3_SYMBOL_LENGTH+1] = {
"l600RI00QP8600003[000000006i_a3900EJ00oR0000"
"jV00W^00kX:h0000La00000000h6dlLj00Sm00V;0000"
"00W>PaHB0000mg@Go<3Q;f00agIgQJXoiL0000dBj;WO"
"005jl7^^0000AoNN`FTD1G007o`o>2g`5O0000X=n1Qk"
"dR00g100hYk\\0000A300000000\\XoLAd00N@00:g0000"
"6n005l00J^Zn0000O700000000nW>=O600fF00I10000"
"00G8]d=C0000=NgcTioKAX00\\NkN[R@TF@0000fH?AYI"
"00OjD6?F0000PE11@VX<]=006fGf<oA@O\\0000mj[]O4"
"00NUH4:\\0000:W<oQ5`8Eg004WJW8ZNQ290000@\\bf[i"
"002dHX]]0000:i<<QRY8EO00XWQWCZ9Q2I0000@dbE[`"
"P^00`?00WMf^0000GA00000000^I:bGP00\\e00ga0000"
"oB00[<00RUhB00009D00000000IY8A9o00X500k[0000"
"X0000000000Z0Z90007010e00j000000000ej100m000"
"0Q00000000P0200N000X0E0Qj00000000030]^000W00"
"00000000>_000000000000]B00000000HD00000000?X"
"00000000hF000000000000bh00000000S`00000000lS"
"001JkDRJ00005m66SAeX[^00DmabX4US1]00008Jo[1H"
"00Vh6:jj0000SI3OiYk2dM00:IWID[ciQc00004;]dJ<"
"40000000000?0?N000G0L0H006000000000H6d00b000"
"0n00000000U0>00D000M0X0nP00000000020f?000j00"
"0@00000000M0\\00A000l0n0@X000000000S0JL000E00"
"X0000000000U0U90007010e00l000000000el100m000"
"00=T3QLL0000i]^^bH61F_00QUbU1dCb=h0000[TgF;n"
"0015Zmn?0000nLEfgO@WBA00bLcLiT1gI:0000=?>B9M"
"00TbAVLE0000XQY`D>R?@o00VQ2Q?PTDCW00003EaG85"
"00>:;M660000f`TTR[JhXN00M`R`jCoR><0000c1HXDF"
"M0000000000C0CV000E070=00P0000000006P700e000"
"0R00000000U0>00D000M0X0RP000000000206?000`00"
"?P00YU00iG2P0000@\\00000000PoKm@?00d;00OS0000"
":[003700gJW10000d9000000001MkGd:00Bc00f30000"
"aF008S00_T9=0000;V00000000=73fWa00cX00AG0000"
"Bl00Ko005?Cl0000NE00000000l`ZSNI004Q00<70000"
"00000000jJ000000000000Zj00000000AY00000000>A"
"00000000FJ000000000000ZF00000000?Y00000000>?"
"00`ZUA;m0000e3VVkT9Ra400A3<3R5Mk`G0000:mPa`N"
"00R^BfPP0000\\<9NYJW>:@00f<Y<_DOYRO0000La6:5T"
"00@ZR?WW0000C1SSXL7N^m00?d4dN3;4@=00006ZQ^@:"
"00HkQP8>00008\\a=EX:OjB00^\\f\\3gHEGe0000n>FjM1"
"T0000000000H0d[000I0N0M00a000000000MfN00X000"
"0D00000000l0W00T000c0@0Dn000000000k0mK000Q00"
"00Si9RGG0000Y6??H;B:Q800RnHn71jHS^0000Di3Qal"
"007KCel]0000lGX43NV`md00HGOG`i73<f0000S]Zmo@"
"H0000000000R0R7000a0;0n00D000000000CDn00U000"
"0800000000_0F00Y000d0A0TD000000000`0=>000N00"
};

const unsigned int BCNavBit::e2v_table[128] = {
 1,  2,  4,  8, 16, 32,  3,  6, 12, 24, 48, 35,  5, 10, 20, 40,
19, 38, 15, 30, 60, 59, 53, 41, 17, 34,  7, 14, 28, 56, 51, 37, 
 9, 18, 36, 11, 22, 44, 27, 54, 47, 29, 58, 55, 45, 25, 50, 39, 
13, 26, 52, 43, 21, 42, 23, 46, 31, 62, 63, 61, 57, 49, 33, 
 1,  2,  4,  8, 16, 32,  3,  6, 12, 24, 48, 35,  5, 10, 20, 40,
19, 38, 15, 30, 60, 59, 53, 41, 17, 34,  7, 14, 28, 56, 51, 37, 
 9, 18, 36, 11, 22, 44, 27, 54, 47, 29, 58, 55, 45, 25, 50, 39, 
13, 26, 52, 43, 21, 42, 23, 46, 31, 62, 63, 61, 57, 49, 33, 
};

const unsigned int BCNavBit::v2e_table[64] = {
 0,  0,  1,  6,  2, 12,  7, 26,  3, 32, 13, 35,  8, 48, 27, 18, 
 4, 24, 33, 16, 14, 52, 36, 54,  9, 45, 49, 38, 28, 41, 19, 56, 
 5, 62, 25, 11, 34, 31, 17, 47, 15, 23, 53, 51, 37, 44, 55, 40, 
10, 61, 46, 30, 50, 22, 39, 43, 29, 60, 42, 21, 20, 59, 57, 58, 
};

BCNavBit::BCNavBit()
{
}

BCNavBit::~BCNavBit()
{
}

int BCNavBit::GetFrameData(GNSS_TIME StartTime, int svid, int Param, int *NavBits)
{
	int i, j, page, soh, how;
	int Symbol2[200], Symbol3[88];
	int bits2[1200], bits3[528];
	unsigned int *data, value;
	int *p1, *p2, *p3;

	// data channel
	if (svid < 1 || svid > 63)
		return 1;
	page = StartTime.MilliSeconds / 18000;		// frames from week epoch
	how = page / 200;
	soh = page % 200;
	// assume subframe 3 broadcast page 1 to 4 cyclically
	page %= 4;

	data = BdsSubframe2[svid-1];
	// insert WN and HOW for Subframe2
	data[0] &= 0x7;
	data[0] |= COMPOSE_BITS(StartTime.Week - 1356, 11, 13);
	data[0] |= COMPOSE_BITS(how, 3, 8);
	// generate CRC for subframe2
	AppendCRC(data, 25);
	// assign each 6bit into Symbol2 array
	for (i = 0; i < 25; i ++)
	{
		Symbol2[i*4+0] = (data[i] >> 18) & 0x3f;
		Symbol2[i*4+1] = (data[i] >> 12) & 0x3f;
		Symbol2[i*4+2] = (data[i] >> 6) & 0x3f;
		Symbol2[i*4+3] = data[i] & 0x3f;
	}
	B1CLDPCEncode(Symbol2, 2);		// do LDPC encode
	for (i = 0; i < 200; i ++)
		AssignBits(Symbol2[i], 6, bits2+i*6);

	// generate CRC for subframe2
	data = BdsSubframe3[page];
	AppendCRC(data, 11);
	// assign each 6bit into Symbol3 array
	for (i = 0; i < 11; i ++)
	{
		Symbol3[i*4+0] = (data[i] >> 18) & 0x3f;
		Symbol3[i*4+1] = (data[i] >> 12) & 0x3f;
		Symbol3[i*4+2] = (data[i] >> 6) & 0x3f;
		Symbol3[i*4+3] = data[i] & 0x3f;
	}
	B1CLDPCEncode(Symbol3, 3);		// do LDPC encode
	for (i = 0; i < 88; i ++)
		AssignBits(Symbol3[i], 6, bits3+i*6);

	// do interleaving
	for (i = 0; i < 11; i ++)	// 11 round of subframe2, subframe2, subframe3
	{
		p1 = NavBits + 72 + i * 3;
		p2 = NavBits + 73 + i * 3;
		p3 = NavBits + 74 + i * 3;
		for (j = 0; j < 48; j ++)
		{
			*p1 = bits2[i*96+j]; p1 += 36;
			*p2 = bits2[i*96+48+j]; p2 += 36;
			*p3 = bits3[i*48+j]; p3 += 36;
		}
	}
	// last three rows of subframe2
	p1 = NavBits + 105;
	p2 = NavBits + 106;
	p3 = NavBits + 107;
	for (j = 0; j < 48; j ++)
	{
		*p1 = bits2[22*48+j]; p1 += 36;
		*p2 = bits2[23*48+j]; p2 += 36;
		*p3 = bits3[24*48+j]; p3 += 36;
	}

	// add subframe 1
	AssignBits(BCH_prn_table[svid], 21, NavBits);
	value = (unsigned int)(BCH_soh_table[soh] >> 32);
	AssignBits(value, 19, NavBits + 21);
	value = (unsigned int)(BCH_soh_table[soh]);
	AssignBits(value, 32, NavBits + 40);
	return 0;
}

int BCNavBit::SetEphemeris(int svid, PGPS_EPHEMERIS Eph)
{
	if (svid < 1 || svid > 63 || !Eph || !Eph->valid)
		return 0;
	ComposeSubframe2(Eph, BdsSubframe2[svid-1]);
	return svid;
}

// 600 bits subframe information divided int 25 WORDs
// each WORD has 24bits in 24LSB of unsigned int data in Subframe2[]
// bit order is MSB first (from bit23) and least index first
// each 24bits divided into four 6bit symbols in LDPC encode
void BCNavBit::ComposeSubframe2(PGPS_EPHEMERIS Eph, unsigned int Subframe2[25])
{
	signed int IntValue;
	unsigned int UintValue;
	long long int LongValue;
	unsigned long long int ULongValue;

	// IODC and IODE in WORD0 ~ WORD1(15MSB)
	Subframe2[0] = COMPOSE_BITS(Eph->iodc >> 7, 0, 3);
	Subframe2[1] = COMPOSE_BITS(Eph->iodc, 17, 7);
	Subframe2[1] |= COMPOSE_BITS(Eph->iode2, 9, 8);

	// ephemeris1 203bits in WORD1 ~ WORD10(2MSB)
	UintValue = Eph->toe / 300;	// toe
	Subframe2[1] |= COMPOSE_BITS(UintValue >> 2, 0, 9);
	Subframe2[2] = COMPOSE_BITS(UintValue, 22, 2);
	UintValue = Eph->flag;	// SatType
	Subframe2[2] |= COMPOSE_BITS(UintValue, 20, 2);
	IntValue = UnscaleInt(Eph->axis - ((UintValue == 3) ? 27906100.0 : 42162200.0), -9);	// deltaA
	Subframe2[2] |= COMPOSE_BITS(IntValue >> 6, 0, 20);
	Subframe2[3] = COMPOSE_BITS(IntValue, 18, 6);
	IntValue = 0;//UnscaleInt(Eph->axis_dot, -21);	// Adot
	Subframe2[3] |= COMPOSE_BITS(IntValue >> 7, 0, 18);
	Subframe2[4] = COMPOSE_BITS(IntValue, 17, 7);
	IntValue = UnscaleInt(Eph->delta_n / PI, -44);	// delta_n
	Subframe2[4] |= COMPOSE_BITS(IntValue, 0, 17);
	IntValue = UnscaleInt(Eph->delta_n_dot, -57);	// delta n dot
	Subframe2[5] = COMPOSE_BITS(IntValue, 1, 23);
	LongValue = UnscaleLong(Eph->M0 / PI, -32);
	IntValue = (LongValue & 0x100000000LL) ? 1 : 0;
	UintValue = (unsigned int)LongValue;
	Subframe2[5] |= COMPOSE_BITS(IntValue, 0, 1);
	Subframe2[6] = COMPOSE_BITS(UintValue >> 8, 0, 24);
	Subframe2[7] = COMPOSE_BITS(UintValue, 16, 8);
	ULongValue = UnscaleULong(Eph->ecc, -34);
	IntValue = (ULongValue & 0x100000000LL) ? 1 : 0;
	UintValue = (unsigned int)ULongValue;
	Subframe2[7] |= COMPOSE_BITS(IntValue, 15, 1);
	Subframe2[7] |= COMPOSE_BITS(UintValue >> 17, 0, 15);
	Subframe2[8] = COMPOSE_BITS(UintValue, 7, 17);
	LongValue = UnscaleLong(Eph->w / PI, -32);
	IntValue = (LongValue & 0x100000000LL) ? 1 : 0;
	UintValue = (unsigned int)LongValue;
	Subframe2[8] |= COMPOSE_BITS(IntValue, 6, 1);
	Subframe2[8] |= COMPOSE_BITS(UintValue >> 26, 0, 6);
	Subframe2[9] = COMPOSE_BITS(UintValue >> 2, 0, 24);
	Subframe2[10] = COMPOSE_BITS(UintValue, 22, 2);

	// ephemeris2 222bits in WORD10 ~ WORD19(8MSB)
	LongValue = UnscaleLong(Eph->omega0 / PI, -32);
	IntValue = (LongValue & 0x100000000LL) ? 1 : 0;
	UintValue = (unsigned int)LongValue;
	Subframe2[10] |= COMPOSE_BITS(IntValue, 21, 1);
	Subframe2[10] |= COMPOSE_BITS(UintValue >> 11, 0, 21);
	Subframe2[11] = COMPOSE_BITS(UintValue, 13, 11);
	LongValue = UnscaleLong(Eph->i0 / PI, -32);
	IntValue = (LongValue & 0x100000000LL) ? 1 : 0;
	UintValue = (unsigned int)LongValue;
	Subframe2[11] |= COMPOSE_BITS(IntValue, 12, 1);
	Subframe2[11] |= COMPOSE_BITS(UintValue >> 20, 0, 12);
	Subframe2[12] = COMPOSE_BITS(UintValue, 4, 20);
	IntValue = UnscaleInt(Eph->omega_dot / PI, -44);	// omega dot
	Subframe2[12] |= COMPOSE_BITS(IntValue >> 15, 0, 4);
	Subframe2[13] = COMPOSE_BITS(IntValue, 9, 15);
	IntValue = UnscaleInt(Eph->idot / PI, -44);	// i dot
	Subframe2[13] |= COMPOSE_BITS(IntValue >> 6, 0, 9);
	Subframe2[14] = COMPOSE_BITS(IntValue, 18, 6);
	IntValue = UnscaleInt(Eph->cis, -30);	// cis
	Subframe2[14] |= COMPOSE_BITS(IntValue, 2, 16);
	IntValue = UnscaleInt(Eph->cic, -30);	// cic
	Subframe2[14] |= COMPOSE_BITS(IntValue >> 14, 0, 2);
	Subframe2[15] = COMPOSE_BITS(IntValue, 10, 14);
	IntValue = UnscaleInt(Eph->crs, -8);	// crs
	Subframe2[15] |= COMPOSE_BITS(IntValue >> 14, 0, 10);
	Subframe2[16] = COMPOSE_BITS(IntValue, 10, 14);
	IntValue = UnscaleInt(Eph->crc, -8);	// crc
	Subframe2[16] |= COMPOSE_BITS(IntValue >> 14, 0, 10);
	Subframe2[17] = COMPOSE_BITS(IntValue, 10, 14);
	IntValue = UnscaleInt(Eph->cus, -30);	// cus
	Subframe2[17] |= COMPOSE_BITS(IntValue >> 11, 0, 10);
	Subframe2[18] = COMPOSE_BITS(IntValue, 13, 11);
	IntValue = UnscaleInt(Eph->cuc, -30);	// cuc
	Subframe2[18] |= COMPOSE_BITS(IntValue >> 8, 0, 13);
	Subframe2[19] = COMPOSE_BITS(IntValue, 16, 8);

	// clock error 69bits in WORD19 ~ WORD22(5MSB)
	UintValue = Eph->toc / 300;	// toc
	Subframe2[19] |= COMPOSE_BITS(UintValue, 5, 11);
	IntValue = UnscaleInt(Eph->af0, -34);	// af0
	Subframe2[19] |= COMPOSE_BITS(IntValue >> 20, 0, 5);
	Subframe2[20] = COMPOSE_BITS(IntValue, 4, 20);
	IntValue = UnscaleInt(Eph->af1, -50);	// af1
	Subframe2[20] |= COMPOSE_BITS(IntValue >> 18, 0, 4);
	Subframe2[21] = COMPOSE_BITS(IntValue, 6, 18);
	IntValue = UnscaleInt(Eph->af2, -66);	// af2
	Subframe2[21] |= COMPOSE_BITS(IntValue >> 5, 0, 6);
	Subframe2[22] = COMPOSE_BITS(IntValue, 19, 5);

	// TGD 36bits in WORD22 ~ WORD23(17MSB)
	IntValue = UnscaleInt(Eph->tgd2, -34);	// TGD B2a
	Subframe2[22] |= COMPOSE_BITS(IntValue, 7, 12);
	IntValue = 0;//UnscaleInt(Eph->???, -34);	// ISC B1C
	Subframe2[22] |= COMPOSE_BITS(IntValue >> 5, 0, 7);
	Subframe2[23] = COMPOSE_BITS(IntValue, 19, 5);
	IntValue = UnscaleInt(Eph->tgd, -34);	// TGD B1C
	Subframe2[23] |= COMPOSE_BITS(IntValue, 7, 12);
}

// put bit in Data from MSB ot LSB into BitStream, bit order from bit(BitNumber-1) to bit(0) of Data
int BCNavBit::AssignBits(unsigned int Data, int BitNumber, int BitStream[])
{
	int i;

	Data <<= (32 - BitNumber);
	for (i = 0; i < BitNumber; i ++)
	{
		BitStream[i] = (Data & 0x80000000) ? 1 : 0;
		Data <<= 1;
	}

	return BitNumber;
}

// Append CRC to the end of data stream, Length is the size of DataStream (24bit data in each DWORD) including CRC bits
int BCNavBit::AppendCRC(unsigned int DataStream[], int Length)
{
	int i;
	unsigned int Data, crc_result = 0;

	for (i = 0; i < Length - 1; i ++)
	{
		Data = DataStream[i] << 8;	// move data to MSB
		crc_result = (crc_result << 8) ^ crc24q[(Data >> 24) ^ (unsigned char)(crc_result >> 16)];
		Data <<= 8;
		crc_result = (crc_result << 8) ^ crc24q[(Data >> 24) ^ (unsigned char)(crc_result >> 16)];
		Data <<= 8;
		crc_result = (crc_result << 8) ^ crc24q[(Data >> 24) ^ (unsigned char)(crc_result >> 16)];
		Data <<= 8;
	}
	DataStream[i] = (crc_result & 0xffffff);

	return 0;
}

int BCNavBit::B1CLDPCEncode(int SymbolStream[], int Subframe)
{
	int *pParity;
	const char *pMatrixGen;
	int SymbolLength;

	if (Subframe ==2)
	{
		SymbolLength = B1C_SUBFRAME2_SYMBOL_LENGTH;
		pMatrixGen = B1CMatrixGen2;
	}
	else if (Subframe == 3)
	{
		SymbolLength = B1C_SUBFRAME3_SYMBOL_LENGTH;
		pMatrixGen = B1CMatrixGen3;
	}
	else 
		return 1;

	pParity = SymbolStream + SymbolLength;
	GenParityMatrix(pMatrixGen, SymbolStream, pParity, SymbolLength);

	return 0;
}

// multiply MatrixGen with Symbols to generate parity symbols
void BCNavBit::GenParityMatrix(const char *MatrixGen, int *Symbols, int *Parity, int Length)
{
	int i, j;
	const char *p1 = MatrixGen;
	int *p2, sum;

	for (i = 0; i < Length; i ++)
	{
		sum = 0;
		p2 = Symbols;
		for (j = 0; j < Length; j ++)
		{
			sum ^= GF6IntMul((int)(*p1)-'0', *p2);
			p1 ++; p2 ++;
		}
		*Parity ++ = sum;
	}
}

int BCNavBit::GF6IntMul(int a, int b)
{
	if (a && b)
		return e2v_table[v2e_table[a] + v2e_table[b]];
	else
		return 0;
}
